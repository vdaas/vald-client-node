/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter add_pb_suffix,client_grpc1,generate_dependencies,keep_enum_prefix,ts_nocheck,use_proto_field_name,output_javascript,output_legacy_commonjs,eslint_disable
// @generated from protobuf file "vald/v1/vald/object.proto" (package "vald.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
//
// Copyright (C) 2019-2024 vdaas.org vald team <vald@vdaas.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { Object_List_Response } from "../payload/payload_pb";
import type { Object_List_Request } from "../payload/payload_pb";
import type { Object_StreamVector } from "../payload/payload_pb";
import type { Object_Vector } from "../payload/payload_pb";
import type { Object_VectorRequest } from "../payload/payload_pb";
import type { Object_ID } from "../payload/payload_pb";
import * as grpc from "@grpc/grpc-js";
/**
 * Object service provides ways to fetch indexed vectors.
 *
 * @generated from protobuf service vald.v1.Object
 */
export interface IObjectClient {
    /**
     * A method to check whether a specified ID is indexed or not.
     *
     * @generated from protobuf rpc: Exists(payload.v1.Object.ID) returns (payload.v1.Object.ID);
     */
    exists(input: Object_ID, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Object_ID) => void): grpc.ClientUnaryCall;
    exists(input: Object_ID, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Object_ID) => void): grpc.ClientUnaryCall;
    exists(input: Object_ID, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Object_ID) => void): grpc.ClientUnaryCall;
    exists(input: Object_ID, callback: (err: grpc.ServiceError | null, value?: Object_ID) => void): grpc.ClientUnaryCall;
    /**
     * A method to fetch a vector.
     *
     * @generated from protobuf rpc: GetObject(payload.v1.Object.VectorRequest) returns (payload.v1.Object.Vector);
     */
    getObject(input: Object_VectorRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Object_Vector) => void): grpc.ClientUnaryCall;
    getObject(input: Object_VectorRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Object_Vector) => void): grpc.ClientUnaryCall;
    getObject(input: Object_VectorRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Object_Vector) => void): grpc.ClientUnaryCall;
    getObject(input: Object_VectorRequest, callback: (err: grpc.ServiceError | null, value?: Object_Vector) => void): grpc.ClientUnaryCall;
    /**
     * A method to fetch vectors by bidirectional streaming.
     *
     * @generated from protobuf rpc: StreamGetObject(stream payload.v1.Object.VectorRequest) returns (stream payload.v1.Object.StreamVector);
     */
    streamGetObject(metadata: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientDuplexStream<Object_VectorRequest, Object_StreamVector>;
    streamGetObject(options?: grpc.CallOptions): grpc.ClientDuplexStream<Object_VectorRequest, Object_StreamVector>;
    /**
     * A method to get all the vectors with server streaming
     *
     * @generated from protobuf rpc: StreamListObject(payload.v1.Object.List.Request) returns (stream payload.v1.Object.List.Response);
     */
    streamListObject(input: Object_List_Request, metadata?: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientReadableStream<Object_List_Response>;
    streamListObject(input: Object_List_Request, options?: grpc.CallOptions): grpc.ClientReadableStream<Object_List_Response>;
}
/**
 * Object service provides ways to fetch indexed vectors.
 *
 * @generated from protobuf service vald.v1.Object
 */
export declare class ObjectClient extends grpc.Client implements IObjectClient {
    private readonly _binaryOptions;
    constructor(address: string, credentials: grpc.ChannelCredentials, options?: grpc.ClientOptions, binaryOptions?: Partial<BinaryReadOptions & BinaryWriteOptions>);
    /**
     * A method to check whether a specified ID is indexed or not.
     *
     * @generated from protobuf rpc: Exists(payload.v1.Object.ID) returns (payload.v1.Object.ID);
     */
    exists(input: Object_ID, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Object_ID) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Object_ID) => void), callback?: ((err: grpc.ServiceError | null, value?: Object_ID) => void)): grpc.ClientUnaryCall;
    /**
     * A method to fetch a vector.
     *
     * @generated from protobuf rpc: GetObject(payload.v1.Object.VectorRequest) returns (payload.v1.Object.Vector);
     */
    getObject(input: Object_VectorRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Object_Vector) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Object_Vector) => void), callback?: ((err: grpc.ServiceError | null, value?: Object_Vector) => void)): grpc.ClientUnaryCall;
    /**
     * A method to fetch vectors by bidirectional streaming.
     *
     * @generated from protobuf rpc: StreamGetObject(stream payload.v1.Object.VectorRequest) returns (stream payload.v1.Object.StreamVector);
     */
    streamGetObject(metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientDuplexStream<Object_VectorRequest, Object_StreamVector>;
    /**
     * A method to get all the vectors with server streaming
     *
     * @generated from protobuf rpc: StreamListObject(payload.v1.Object.List.Request) returns (stream payload.v1.Object.List.Response);
     */
    streamListObject(input: Object_List_Request, metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientReadableStream<Object_List_Response>;
}
