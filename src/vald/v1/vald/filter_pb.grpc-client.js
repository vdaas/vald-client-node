/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter add_pb_suffix,client_grpc1,generate_dependencies,keep_enum_prefix,ts_nocheck,use_proto_field_name,output_javascript,output_legacy_commonjs,eslint_disable
// @generated from protobuf file "vald/v1/vald/filter.proto" (package "vald.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
//
// Copyright (C) 2019-2024 vdaas.org vald team <vald@vdaas.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterClient = void 0;
/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter add_pb_suffix,client_grpc1,generate_dependencies,keep_enum_prefix,ts_nocheck,use_proto_field_name,output_javascript,output_legacy_commonjs,eslint_disable
// @generated from protobuf file "vald/v1/vald/filter.proto" (package "vald.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
//
// Copyright (C) 2019-2024 vdaas.org vald team <vald@vdaas.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
const filter_pb_1 = require("./filter_pb");
const grpc = require("@grpc/grpc-js");
/**
 * Filter service provides ways to connect to Vald through filter.
 *
 * @generated from protobuf service vald.v1.Filter
 */
class FilterClient extends grpc.Client {
    constructor(address, credentials, options = {}, binaryOptions = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * A method to search object.
     *
     * @generated from protobuf rpc: SearchObject(payload.v1.Search.ObjectRequest) returns (payload.v1.Search.Response);
     */
    searchObject(input, metadata, options, callback) {
        const method = filter_pb_1.Filter.methods[0];
        return this.makeUnaryRequest(`/${filter_pb_1.Filter.typeName}/${method.name}`, (value) => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value) => method.O.fromBinary(value, this._binaryOptions), input, metadata, options, callback);
    }
    /**
     * A method to search multiple objects.
     *
     * @generated from protobuf rpc: MultiSearchObject(payload.v1.Search.MultiObjectRequest) returns (payload.v1.Search.Responses);
     */
    multiSearchObject(input, metadata, options, callback) {
        const method = filter_pb_1.Filter.methods[1];
        return this.makeUnaryRequest(`/${filter_pb_1.Filter.typeName}/${method.name}`, (value) => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value) => method.O.fromBinary(value, this._binaryOptions), input, metadata, options, callback);
    }
    /**
     * A method to search object by bidirectional streaming.
     *
     * @generated from protobuf rpc: StreamSearchObject(stream payload.v1.Search.ObjectRequest) returns (stream payload.v1.Search.StreamResponse);
     */
    streamSearchObject(metadata, options) {
        const method = filter_pb_1.Filter.methods[2];
        return this.makeBidiStreamRequest(`/${filter_pb_1.Filter.typeName}/${method.name}`, (value) => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value) => method.O.fromBinary(value, this._binaryOptions), metadata, options);
    }
    /**
     * A method insert object.
     *
     * @generated from protobuf rpc: InsertObject(payload.v1.Insert.ObjectRequest) returns (payload.v1.Object.Location);
     */
    insertObject(input, metadata, options, callback) {
        const method = filter_pb_1.Filter.methods[3];
        return this.makeUnaryRequest(`/${filter_pb_1.Filter.typeName}/${method.name}`, (value) => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value) => method.O.fromBinary(value, this._binaryOptions), input, metadata, options, callback);
    }
    /**
     * Represent the streaming RPC to insert object by bidirectional streaming.
     *
     * @generated from protobuf rpc: StreamInsertObject(stream payload.v1.Insert.ObjectRequest) returns (stream payload.v1.Object.StreamLocation);
     */
    streamInsertObject(metadata, options) {
        const method = filter_pb_1.Filter.methods[4];
        return this.makeBidiStreamRequest(`/${filter_pb_1.Filter.typeName}/${method.name}`, (value) => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value) => method.O.fromBinary(value, this._binaryOptions), metadata, options);
    }
    /**
     * A method to insert multiple objects.
     *
     * @generated from protobuf rpc: MultiInsertObject(payload.v1.Insert.MultiObjectRequest) returns (payload.v1.Object.Locations);
     */
    multiInsertObject(input, metadata, options, callback) {
        const method = filter_pb_1.Filter.methods[5];
        return this.makeUnaryRequest(`/${filter_pb_1.Filter.typeName}/${method.name}`, (value) => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value) => method.O.fromBinary(value, this._binaryOptions), input, metadata, options, callback);
    }
    /**
     * A method to update object.
     *
     * @generated from protobuf rpc: UpdateObject(payload.v1.Update.ObjectRequest) returns (payload.v1.Object.Location);
     */
    updateObject(input, metadata, options, callback) {
        const method = filter_pb_1.Filter.methods[6];
        return this.makeUnaryRequest(`/${filter_pb_1.Filter.typeName}/${method.name}`, (value) => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value) => method.O.fromBinary(value, this._binaryOptions), input, metadata, options, callback);
    }
    /**
     * A method to update object by bidirectional streaming.
     *
     * @generated from protobuf rpc: StreamUpdateObject(stream payload.v1.Update.ObjectRequest) returns (stream payload.v1.Object.StreamLocation);
     */
    streamUpdateObject(metadata, options) {
        const method = filter_pb_1.Filter.methods[7];
        return this.makeBidiStreamRequest(`/${filter_pb_1.Filter.typeName}/${method.name}`, (value) => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value) => method.O.fromBinary(value, this._binaryOptions), metadata, options);
    }
    /**
     * A method to update multiple objects.
     *
     * @generated from protobuf rpc: MultiUpdateObject(payload.v1.Update.MultiObjectRequest) returns (payload.v1.Object.Locations);
     */
    multiUpdateObject(input, metadata, options, callback) {
        const method = filter_pb_1.Filter.methods[8];
        return this.makeUnaryRequest(`/${filter_pb_1.Filter.typeName}/${method.name}`, (value) => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value) => method.O.fromBinary(value, this._binaryOptions), input, metadata, options, callback);
    }
    /**
     * A method to upsert object.
     *
     * @generated from protobuf rpc: UpsertObject(payload.v1.Upsert.ObjectRequest) returns (payload.v1.Object.Location);
     */
    upsertObject(input, metadata, options, callback) {
        const method = filter_pb_1.Filter.methods[9];
        return this.makeUnaryRequest(`/${filter_pb_1.Filter.typeName}/${method.name}`, (value) => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value) => method.O.fromBinary(value, this._binaryOptions), input, metadata, options, callback);
    }
    /**
     * A method to upsert object by bidirectional streaming.
     *
     * @generated from protobuf rpc: StreamUpsertObject(stream payload.v1.Upsert.ObjectRequest) returns (stream payload.v1.Object.StreamLocation);
     */
    streamUpsertObject(metadata, options) {
        const method = filter_pb_1.Filter.methods[10];
        return this.makeBidiStreamRequest(`/${filter_pb_1.Filter.typeName}/${method.name}`, (value) => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value) => method.O.fromBinary(value, this._binaryOptions), metadata, options);
    }
    /**
     * A method to upsert multiple objects.
     *
     * @generated from protobuf rpc: MultiUpsertObject(payload.v1.Upsert.MultiObjectRequest) returns (payload.v1.Object.Locations);
     */
    multiUpsertObject(input, metadata, options, callback) {
        const method = filter_pb_1.Filter.methods[11];
        return this.makeUnaryRequest(`/${filter_pb_1.Filter.typeName}/${method.name}`, (value) => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value) => method.O.fromBinary(value, this._binaryOptions), input, metadata, options, callback);
    }
}
exports.FilterClient = FilterClient;
