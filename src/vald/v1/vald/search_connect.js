//
// Copyright (C) 2019-2023 vdaas.org vald team <vald@vdaas.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-connect-es v1.2.0
// @generated from file vald/v1/vald/search.proto (package vald.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Search_IDRequest, Search_MultiIDRequest, Search_MultiRequest, Search_Request, Search_Response, Search_Responses, Search_StreamResponse } from "../payload/payload_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * Search service provides ways to search indexed vectors.
 *
 * @generated from service vald.v1.Search
 */
export const Search = {
  typeName: "vald.v1.Search",
  methods: {
    /**
     * A method to search indexed vectors by a raw vector.
     *
     * @generated from rpc vald.v1.Search.Search
     */
    search: {
      name: "Search",
      I: Search_Request,
      O: Search_Response,
      kind: MethodKind.Unary,
    },
    /**
     * A method to search indexed vectors by ID.
     *
     * @generated from rpc vald.v1.Search.SearchByID
     */
    searchByID: {
      name: "SearchByID",
      I: Search_IDRequest,
      O: Search_Response,
      kind: MethodKind.Unary,
    },
    /**
     * A method to search indexed vectors by multiple vectors.
     *
     * @generated from rpc vald.v1.Search.StreamSearch
     */
    streamSearch: {
      name: "StreamSearch",
      I: Search_Request,
      O: Search_StreamResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * A method to search indexed vectors by multiple IDs.
     *
     * @generated from rpc vald.v1.Search.StreamSearchByID
     */
    streamSearchByID: {
      name: "StreamSearchByID",
      I: Search_IDRequest,
      O: Search_StreamResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * A method to search indexed vectors by multiple vectors in a single request.
     *
     * @generated from rpc vald.v1.Search.MultiSearch
     */
    multiSearch: {
      name: "MultiSearch",
      I: Search_MultiRequest,
      O: Search_Responses,
      kind: MethodKind.Unary,
    },
    /**
     * A method to search indexed vectors by multiple IDs in a single request.
     *
     * @generated from rpc vald.v1.Search.MultiSearchByID
     */
    multiSearchByID: {
      name: "MultiSearchByID",
      I: Search_MultiIDRequest,
      O: Search_Responses,
      kind: MethodKind.Unary,
    },
    /**
     * A method to linear search indexed vectors by a raw vector.
     *
     * @generated from rpc vald.v1.Search.LinearSearch
     */
    linearSearch: {
      name: "LinearSearch",
      I: Search_Request,
      O: Search_Response,
      kind: MethodKind.Unary,
    },
    /**
     * A method to linear search indexed vectors by ID.
     *
     * @generated from rpc vald.v1.Search.LinearSearchByID
     */
    linearSearchByID: {
      name: "LinearSearchByID",
      I: Search_IDRequest,
      O: Search_Response,
      kind: MethodKind.Unary,
    },
    /**
     * A method to linear search indexed vectors by multiple vectors.
     *
     * @generated from rpc vald.v1.Search.StreamLinearSearch
     */
    streamLinearSearch: {
      name: "StreamLinearSearch",
      I: Search_Request,
      O: Search_StreamResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * A method to linear search indexed vectors by multiple IDs.
     *
     * @generated from rpc vald.v1.Search.StreamLinearSearchByID
     */
    streamLinearSearchByID: {
      name: "StreamLinearSearchByID",
      I: Search_IDRequest,
      O: Search_StreamResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * A method to linear search indexed vectors by multiple vectors in a single
     * request.
     *
     * @generated from rpc vald.v1.Search.MultiLinearSearch
     */
    multiLinearSearch: {
      name: "MultiLinearSearch",
      I: Search_MultiRequest,
      O: Search_Responses,
      kind: MethodKind.Unary,
    },
    /**
     * A method to linear search indexed vectors by multiple IDs in a single
     * request.
     *
     * @generated from rpc vald.v1.Search.MultiLinearSearchByID
     */
    multiLinearSearchByID: {
      name: "MultiLinearSearchByID",
      I: Search_MultiIDRequest,
      O: Search_Responses,
      kind: MethodKind.Unary,
    },
  }
};

