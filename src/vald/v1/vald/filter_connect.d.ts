//
// Copyright (C) 2019-2023 vdaas.org vald team <vald@vdaas.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-connect-es v1.2.0
// @generated from file vald/v1/vald/filter.proto (package vald.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Insert_MultiObjectRequest, Insert_ObjectRequest, Object_Location, Object_Locations, Object_StreamLocation, Search_MultiObjectRequest, Search_ObjectRequest, Search_Response, Search_Responses, Search_StreamResponse, Update_MultiObjectRequest, Update_ObjectRequest, Upsert_MultiObjectRequest, Upsert_ObjectRequest } from "../payload/payload_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * Filter service provides ways to connect to Vald through filter.
 *
 * @generated from service vald.v1.Filter
 */
export declare const Filter: {
  readonly typeName: "vald.v1.Filter",
  readonly methods: {
    /**
     * A method to search object.
     *
     * @generated from rpc vald.v1.Filter.SearchObject
     */
    readonly searchObject: {
      readonly name: "SearchObject",
      readonly I: typeof Search_ObjectRequest,
      readonly O: typeof Search_Response,
      readonly kind: MethodKind.Unary,
    },
    /**
     * A method to search multiple objects.
     *
     * @generated from rpc vald.v1.Filter.MultiSearchObject
     */
    readonly multiSearchObject: {
      readonly name: "MultiSearchObject",
      readonly I: typeof Search_MultiObjectRequest,
      readonly O: typeof Search_Responses,
      readonly kind: MethodKind.Unary,
    },
    /**
     * A method to search object by bidirectional streaming.
     *
     * @generated from rpc vald.v1.Filter.StreamSearchObject
     */
    readonly streamSearchObject: {
      readonly name: "StreamSearchObject",
      readonly I: typeof Search_ObjectRequest,
      readonly O: typeof Search_StreamResponse,
      readonly kind: MethodKind.BiDiStreaming,
    },
    /**
     * A method insert object.
     *
     * @generated from rpc vald.v1.Filter.InsertObject
     */
    readonly insertObject: {
      readonly name: "InsertObject",
      readonly I: typeof Insert_ObjectRequest,
      readonly O: typeof Object_Location,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Represent the streaming RPC to insert object by bidirectional streaming.
     *
     * @generated from rpc vald.v1.Filter.StreamInsertObject
     */
    readonly streamInsertObject: {
      readonly name: "StreamInsertObject",
      readonly I: typeof Insert_ObjectRequest,
      readonly O: typeof Object_StreamLocation,
      readonly kind: MethodKind.BiDiStreaming,
    },
    /**
     * A method to insert multiple objects.
     *
     * @generated from rpc vald.v1.Filter.MultiInsertObject
     */
    readonly multiInsertObject: {
      readonly name: "MultiInsertObject",
      readonly I: typeof Insert_MultiObjectRequest,
      readonly O: typeof Object_Locations,
      readonly kind: MethodKind.Unary,
    },
    /**
     * A method to update object.
     *
     * @generated from rpc vald.v1.Filter.UpdateObject
     */
    readonly updateObject: {
      readonly name: "UpdateObject",
      readonly I: typeof Update_ObjectRequest,
      readonly O: typeof Object_Location,
      readonly kind: MethodKind.Unary,
    },
    /**
     * A method to update object by bidirectional streaming.
     *
     * @generated from rpc vald.v1.Filter.StreamUpdateObject
     */
    readonly streamUpdateObject: {
      readonly name: "StreamUpdateObject",
      readonly I: typeof Update_ObjectRequest,
      readonly O: typeof Object_StreamLocation,
      readonly kind: MethodKind.BiDiStreaming,
    },
    /**
     * A method to update multiple objects.
     *
     * @generated from rpc vald.v1.Filter.MultiUpdateObject
     */
    readonly multiUpdateObject: {
      readonly name: "MultiUpdateObject",
      readonly I: typeof Update_MultiObjectRequest,
      readonly O: typeof Object_Locations,
      readonly kind: MethodKind.Unary,
    },
    /**
     * A method to upsert object.
     *
     * @generated from rpc vald.v1.Filter.UpsertObject
     */
    readonly upsertObject: {
      readonly name: "UpsertObject",
      readonly I: typeof Upsert_ObjectRequest,
      readonly O: typeof Object_Location,
      readonly kind: MethodKind.Unary,
    },
    /**
     * A method to upsert object by bidirectional streaming.
     *
     * @generated from rpc vald.v1.Filter.StreamUpsertObject
     */
    readonly streamUpsertObject: {
      readonly name: "StreamUpsertObject",
      readonly I: typeof Upsert_ObjectRequest,
      readonly O: typeof Object_StreamLocation,
      readonly kind: MethodKind.BiDiStreaming,
    },
    /**
     * A method to upsert multiple objects.
     *
     * @generated from rpc vald.v1.Filter.MultiUpsertObject
     */
    readonly multiUpsertObject: {
      readonly name: "MultiUpsertObject",
      readonly I: typeof Upsert_MultiObjectRequest,
      readonly O: typeof Object_Locations,
      readonly kind: MethodKind.Unary,
    },
  }
};

