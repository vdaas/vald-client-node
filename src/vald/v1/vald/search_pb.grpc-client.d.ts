/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter add_pb_suffix,client_grpc1,generate_dependencies,keep_enum_prefix,ts_nocheck,use_proto_field_name,output_javascript,output_legacy_commonjs,eslint_disable
// @generated from protobuf file "vald/v1/vald/search.proto" (package "vald.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
//
// Copyright (C) 2019-2024 vdaas.org vald team <vald@vdaas.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { Search_MultiIDRequest } from "../payload/payload_pb";
import type { Search_Responses } from "../payload/payload_pb";
import type { Search_MultiRequest } from "../payload/payload_pb";
import type { Search_StreamResponse } from "../payload/payload_pb";
import type { Search_IDRequest } from "../payload/payload_pb";
import type { Search_Response } from "../payload/payload_pb";
import type { Search_Request } from "../payload/payload_pb";
import * as grpc from "@grpc/grpc-js";
/**
 * Search service provides ways to search indexed vectors.
 *
 * @generated from protobuf service vald.v1.Search
 */
export interface ISearchClient {
    /**
     * A method to search indexed vectors by a raw vector.
     *
     * @generated from protobuf rpc: Search(payload.v1.Search.Request) returns (payload.v1.Search.Response);
     */
    search(input: Search_Request, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Search_Response) => void): grpc.ClientUnaryCall;
    search(input: Search_Request, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Search_Response) => void): grpc.ClientUnaryCall;
    search(input: Search_Request, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Search_Response) => void): grpc.ClientUnaryCall;
    search(input: Search_Request, callback: (err: grpc.ServiceError | null, value?: Search_Response) => void): grpc.ClientUnaryCall;
    /**
     * A method to search indexed vectors by ID.
     *
     * @generated from protobuf rpc: SearchByID(payload.v1.Search.IDRequest) returns (payload.v1.Search.Response);
     */
    searchByID(input: Search_IDRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Search_Response) => void): grpc.ClientUnaryCall;
    searchByID(input: Search_IDRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Search_Response) => void): grpc.ClientUnaryCall;
    searchByID(input: Search_IDRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Search_Response) => void): grpc.ClientUnaryCall;
    searchByID(input: Search_IDRequest, callback: (err: grpc.ServiceError | null, value?: Search_Response) => void): grpc.ClientUnaryCall;
    /**
     * A method to search indexed vectors by multiple vectors.
     *
     * @generated from protobuf rpc: StreamSearch(stream payload.v1.Search.Request) returns (stream payload.v1.Search.StreamResponse);
     */
    streamSearch(metadata: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientDuplexStream<Search_Request, Search_StreamResponse>;
    streamSearch(options?: grpc.CallOptions): grpc.ClientDuplexStream<Search_Request, Search_StreamResponse>;
    /**
     * A method to search indexed vectors by multiple IDs.
     *
     * @generated from protobuf rpc: StreamSearchByID(stream payload.v1.Search.IDRequest) returns (stream payload.v1.Search.StreamResponse);
     */
    streamSearchByID(metadata: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientDuplexStream<Search_IDRequest, Search_StreamResponse>;
    streamSearchByID(options?: grpc.CallOptions): grpc.ClientDuplexStream<Search_IDRequest, Search_StreamResponse>;
    /**
     * A method to search indexed vectors by multiple vectors in a single request.
     *
     * @generated from protobuf rpc: MultiSearch(payload.v1.Search.MultiRequest) returns (payload.v1.Search.Responses);
     */
    multiSearch(input: Search_MultiRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Search_Responses) => void): grpc.ClientUnaryCall;
    multiSearch(input: Search_MultiRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Search_Responses) => void): grpc.ClientUnaryCall;
    multiSearch(input: Search_MultiRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Search_Responses) => void): grpc.ClientUnaryCall;
    multiSearch(input: Search_MultiRequest, callback: (err: grpc.ServiceError | null, value?: Search_Responses) => void): grpc.ClientUnaryCall;
    /**
     * A method to search indexed vectors by multiple IDs in a single request.
     *
     * @generated from protobuf rpc: MultiSearchByID(payload.v1.Search.MultiIDRequest) returns (payload.v1.Search.Responses);
     */
    multiSearchByID(input: Search_MultiIDRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Search_Responses) => void): grpc.ClientUnaryCall;
    multiSearchByID(input: Search_MultiIDRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Search_Responses) => void): grpc.ClientUnaryCall;
    multiSearchByID(input: Search_MultiIDRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Search_Responses) => void): grpc.ClientUnaryCall;
    multiSearchByID(input: Search_MultiIDRequest, callback: (err: grpc.ServiceError | null, value?: Search_Responses) => void): grpc.ClientUnaryCall;
    /**
     * A method to linear search indexed vectors by a raw vector.
     *
     * @generated from protobuf rpc: LinearSearch(payload.v1.Search.Request) returns (payload.v1.Search.Response);
     */
    linearSearch(input: Search_Request, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Search_Response) => void): grpc.ClientUnaryCall;
    linearSearch(input: Search_Request, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Search_Response) => void): grpc.ClientUnaryCall;
    linearSearch(input: Search_Request, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Search_Response) => void): grpc.ClientUnaryCall;
    linearSearch(input: Search_Request, callback: (err: grpc.ServiceError | null, value?: Search_Response) => void): grpc.ClientUnaryCall;
    /**
     * A method to linear search indexed vectors by ID.
     *
     * @generated from protobuf rpc: LinearSearchByID(payload.v1.Search.IDRequest) returns (payload.v1.Search.Response);
     */
    linearSearchByID(input: Search_IDRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Search_Response) => void): grpc.ClientUnaryCall;
    linearSearchByID(input: Search_IDRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Search_Response) => void): grpc.ClientUnaryCall;
    linearSearchByID(input: Search_IDRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Search_Response) => void): grpc.ClientUnaryCall;
    linearSearchByID(input: Search_IDRequest, callback: (err: grpc.ServiceError | null, value?: Search_Response) => void): grpc.ClientUnaryCall;
    /**
     * A method to linear search indexed vectors by multiple vectors.
     *
     * @generated from protobuf rpc: StreamLinearSearch(stream payload.v1.Search.Request) returns (stream payload.v1.Search.StreamResponse);
     */
    streamLinearSearch(metadata: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientDuplexStream<Search_Request, Search_StreamResponse>;
    streamLinearSearch(options?: grpc.CallOptions): grpc.ClientDuplexStream<Search_Request, Search_StreamResponse>;
    /**
     * A method to linear search indexed vectors by multiple IDs.
     *
     * @generated from protobuf rpc: StreamLinearSearchByID(stream payload.v1.Search.IDRequest) returns (stream payload.v1.Search.StreamResponse);
     */
    streamLinearSearchByID(metadata: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientDuplexStream<Search_IDRequest, Search_StreamResponse>;
    streamLinearSearchByID(options?: grpc.CallOptions): grpc.ClientDuplexStream<Search_IDRequest, Search_StreamResponse>;
    /**
     * A method to linear search indexed vectors by multiple vectors in a single
     * request.
     *
     * @generated from protobuf rpc: MultiLinearSearch(payload.v1.Search.MultiRequest) returns (payload.v1.Search.Responses);
     */
    multiLinearSearch(input: Search_MultiRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Search_Responses) => void): grpc.ClientUnaryCall;
    multiLinearSearch(input: Search_MultiRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Search_Responses) => void): grpc.ClientUnaryCall;
    multiLinearSearch(input: Search_MultiRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Search_Responses) => void): grpc.ClientUnaryCall;
    multiLinearSearch(input: Search_MultiRequest, callback: (err: grpc.ServiceError | null, value?: Search_Responses) => void): grpc.ClientUnaryCall;
    /**
     * A method to linear search indexed vectors by multiple IDs in a single
     * request.
     *
     * @generated from protobuf rpc: MultiLinearSearchByID(payload.v1.Search.MultiIDRequest) returns (payload.v1.Search.Responses);
     */
    multiLinearSearchByID(input: Search_MultiIDRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Search_Responses) => void): grpc.ClientUnaryCall;
    multiLinearSearchByID(input: Search_MultiIDRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Search_Responses) => void): grpc.ClientUnaryCall;
    multiLinearSearchByID(input: Search_MultiIDRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Search_Responses) => void): grpc.ClientUnaryCall;
    multiLinearSearchByID(input: Search_MultiIDRequest, callback: (err: grpc.ServiceError | null, value?: Search_Responses) => void): grpc.ClientUnaryCall;
}
/**
 * Search service provides ways to search indexed vectors.
 *
 * @generated from protobuf service vald.v1.Search
 */
export declare class SearchClient extends grpc.Client implements ISearchClient {
    private readonly _binaryOptions;
    constructor(address: string, credentials: grpc.ChannelCredentials, options?: grpc.ClientOptions, binaryOptions?: Partial<BinaryReadOptions & BinaryWriteOptions>);
    /**
     * A method to search indexed vectors by a raw vector.
     *
     * @generated from protobuf rpc: Search(payload.v1.Search.Request) returns (payload.v1.Search.Response);
     */
    search(input: Search_Request, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Search_Response) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Search_Response) => void), callback?: ((err: grpc.ServiceError | null, value?: Search_Response) => void)): grpc.ClientUnaryCall;
    /**
     * A method to search indexed vectors by ID.
     *
     * @generated from protobuf rpc: SearchByID(payload.v1.Search.IDRequest) returns (payload.v1.Search.Response);
     */
    searchByID(input: Search_IDRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Search_Response) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Search_Response) => void), callback?: ((err: grpc.ServiceError | null, value?: Search_Response) => void)): grpc.ClientUnaryCall;
    /**
     * A method to search indexed vectors by multiple vectors.
     *
     * @generated from protobuf rpc: StreamSearch(stream payload.v1.Search.Request) returns (stream payload.v1.Search.StreamResponse);
     */
    streamSearch(metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientDuplexStream<Search_Request, Search_StreamResponse>;
    /**
     * A method to search indexed vectors by multiple IDs.
     *
     * @generated from protobuf rpc: StreamSearchByID(stream payload.v1.Search.IDRequest) returns (stream payload.v1.Search.StreamResponse);
     */
    streamSearchByID(metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientDuplexStream<Search_IDRequest, Search_StreamResponse>;
    /**
     * A method to search indexed vectors by multiple vectors in a single request.
     *
     * @generated from protobuf rpc: MultiSearch(payload.v1.Search.MultiRequest) returns (payload.v1.Search.Responses);
     */
    multiSearch(input: Search_MultiRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Search_Responses) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Search_Responses) => void), callback?: ((err: grpc.ServiceError | null, value?: Search_Responses) => void)): grpc.ClientUnaryCall;
    /**
     * A method to search indexed vectors by multiple IDs in a single request.
     *
     * @generated from protobuf rpc: MultiSearchByID(payload.v1.Search.MultiIDRequest) returns (payload.v1.Search.Responses);
     */
    multiSearchByID(input: Search_MultiIDRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Search_Responses) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Search_Responses) => void), callback?: ((err: grpc.ServiceError | null, value?: Search_Responses) => void)): grpc.ClientUnaryCall;
    /**
     * A method to linear search indexed vectors by a raw vector.
     *
     * @generated from protobuf rpc: LinearSearch(payload.v1.Search.Request) returns (payload.v1.Search.Response);
     */
    linearSearch(input: Search_Request, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Search_Response) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Search_Response) => void), callback?: ((err: grpc.ServiceError | null, value?: Search_Response) => void)): grpc.ClientUnaryCall;
    /**
     * A method to linear search indexed vectors by ID.
     *
     * @generated from protobuf rpc: LinearSearchByID(payload.v1.Search.IDRequest) returns (payload.v1.Search.Response);
     */
    linearSearchByID(input: Search_IDRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Search_Response) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Search_Response) => void), callback?: ((err: grpc.ServiceError | null, value?: Search_Response) => void)): grpc.ClientUnaryCall;
    /**
     * A method to linear search indexed vectors by multiple vectors.
     *
     * @generated from protobuf rpc: StreamLinearSearch(stream payload.v1.Search.Request) returns (stream payload.v1.Search.StreamResponse);
     */
    streamLinearSearch(metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientDuplexStream<Search_Request, Search_StreamResponse>;
    /**
     * A method to linear search indexed vectors by multiple IDs.
     *
     * @generated from protobuf rpc: StreamLinearSearchByID(stream payload.v1.Search.IDRequest) returns (stream payload.v1.Search.StreamResponse);
     */
    streamLinearSearchByID(metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientDuplexStream<Search_IDRequest, Search_StreamResponse>;
    /**
     * A method to linear search indexed vectors by multiple vectors in a single
     * request.
     *
     * @generated from protobuf rpc: MultiLinearSearch(payload.v1.Search.MultiRequest) returns (payload.v1.Search.Responses);
     */
    multiLinearSearch(input: Search_MultiRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Search_Responses) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Search_Responses) => void), callback?: ((err: grpc.ServiceError | null, value?: Search_Responses) => void)): grpc.ClientUnaryCall;
    /**
     * A method to linear search indexed vectors by multiple IDs in a single
     * request.
     *
     * @generated from protobuf rpc: MultiLinearSearchByID(payload.v1.Search.MultiIDRequest) returns (payload.v1.Search.Responses);
     */
    multiLinearSearchByID(input: Search_MultiIDRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Search_Responses) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Search_Responses) => void), callback?: ((err: grpc.ServiceError | null, value?: Search_Responses) => void)): grpc.ClientUnaryCall;
}
