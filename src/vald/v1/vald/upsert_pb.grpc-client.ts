// @generated by protobuf-ts 2.9.3 with parameter add_pb_suffix,client_grpc1,generate_dependencies,keep_enum_prefix,ts_nocheck,use_proto_field_name
// @generated from protobuf file "vald/v1/vald/upsert.proto" (package "vald.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
//
// Copyright (C) 2019-2023 vdaas.org vald team <vald@vdaas.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
import { Upsert } from "./upsert_pb";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { Object_Locations } from "../payload/payload_pb";
import type { Upsert_MultiRequest } from "../payload/payload_pb";
import type { Object_StreamLocation } from "../payload/payload_pb";
import type { Object_Location } from "../payload/payload_pb";
import type { Upsert_Request } from "../payload/payload_pb";
import * as grpc from "@grpc/grpc-js";
/**
 * Upsert service provides ways to insert/update vectors.
 *
 * @generated from protobuf service vald.v1.Upsert
 */
export interface IUpsertClient {
    /**
     * A method to insert/update a vector.
     *
     * @generated from protobuf rpc: Upsert(payload.v1.Upsert.Request) returns (payload.v1.Object.Location);
     */
    upsert(input: Upsert_Request, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Object_Location) => void): grpc.ClientUnaryCall;
    upsert(input: Upsert_Request, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Object_Location) => void): grpc.ClientUnaryCall;
    upsert(input: Upsert_Request, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Object_Location) => void): grpc.ClientUnaryCall;
    upsert(input: Upsert_Request, callback: (err: grpc.ServiceError | null, value?: Object_Location) => void): grpc.ClientUnaryCall;
    /**
     * A method to insert/update multiple vectors by bidirectional streaming.
     *
     * @generated from protobuf rpc: StreamUpsert(stream payload.v1.Upsert.Request) returns (stream payload.v1.Object.StreamLocation);
     */
    streamUpsert(metadata: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientDuplexStream<Upsert_Request, Object_StreamLocation>;
    streamUpsert(options?: grpc.CallOptions): grpc.ClientDuplexStream<Upsert_Request, Object_StreamLocation>;
    /**
     * A method to insert/update multiple vectors in a single request.
     *
     * @generated from protobuf rpc: MultiUpsert(payload.v1.Upsert.MultiRequest) returns (payload.v1.Object.Locations);
     */
    multiUpsert(input: Upsert_MultiRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Object_Locations) => void): grpc.ClientUnaryCall;
    multiUpsert(input: Upsert_MultiRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Object_Locations) => void): grpc.ClientUnaryCall;
    multiUpsert(input: Upsert_MultiRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Object_Locations) => void): grpc.ClientUnaryCall;
    multiUpsert(input: Upsert_MultiRequest, callback: (err: grpc.ServiceError | null, value?: Object_Locations) => void): grpc.ClientUnaryCall;
}
/**
 * Upsert service provides ways to insert/update vectors.
 *
 * @generated from protobuf service vald.v1.Upsert
 */
export class UpsertClient extends grpc.Client implements IUpsertClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * A method to insert/update a vector.
     *
     * @generated from protobuf rpc: Upsert(payload.v1.Upsert.Request) returns (payload.v1.Object.Location);
     */
    upsert(input: Upsert_Request, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Object_Location) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Object_Location) => void), callback?: ((err: grpc.ServiceError | null, value?: Object_Location) => void)): grpc.ClientUnaryCall {
        const method = Upsert.methods[0];
        return this.makeUnaryRequest<Upsert_Request, Object_Location>(`/${Upsert.typeName}/${method.name}`, (value: Upsert_Request): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): Object_Location => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * A method to insert/update multiple vectors by bidirectional streaming.
     *
     * @generated from protobuf rpc: StreamUpsert(stream payload.v1.Upsert.Request) returns (stream payload.v1.Object.StreamLocation);
     */
    streamUpsert(metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientDuplexStream<Upsert_Request, Object_StreamLocation> {
        const method = Upsert.methods[1];
        return this.makeBidiStreamRequest<Upsert_Request, Object_StreamLocation>(`/${Upsert.typeName}/${method.name}`, (value: Upsert_Request): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): Object_StreamLocation => method.O.fromBinary(value, this._binaryOptions), (metadata as any), options);
    }
    /**
     * A method to insert/update multiple vectors in a single request.
     *
     * @generated from protobuf rpc: MultiUpsert(payload.v1.Upsert.MultiRequest) returns (payload.v1.Object.Locations);
     */
    multiUpsert(input: Upsert_MultiRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Object_Locations) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Object_Locations) => void), callback?: ((err: grpc.ServiceError | null, value?: Object_Locations) => void)): grpc.ClientUnaryCall {
        const method = Upsert.methods[2];
        return this.makeUnaryRequest<Upsert_MultiRequest, Object_Locations>(`/${Upsert.typeName}/${method.name}`, (value: Upsert_MultiRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): Object_Locations => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
}
