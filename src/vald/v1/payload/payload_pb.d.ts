//
// Copyright (C) 2019-2023 vdaas.org vald team <vald@vdaas.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-es v1.6.0 with parameter "target=dts,keep_empty_files=true"
// @generated from file vald/v1/payload/payload.proto (package payload.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Status } from "../../../google/rpc/status_pb.js";

/**
 * Search related messages.
 *
 * @generated from message payload.v1.Search
 */
export declare class Search extends Message<Search> {
  constructor(data?: PartialMessage<Search>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Search";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Search;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Search;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Search;

  static equals(a: Search | PlainMessage<Search> | undefined, b: Search | PlainMessage<Search> | undefined): boolean;
}

/**
 * AggregationAlgorithm is enum of each aggregation algorithms
 *
 * @generated from enum payload.v1.Search.AggregationAlgorithm
 */
export declare enum Search_AggregationAlgorithm {
  /**
   * @generated from enum value: Unknown = 0;
   */
  Unknown = 0,

  /**
   * @generated from enum value: ConcurrentQueue = 1;
   */
  ConcurrentQueue = 1,

  /**
   * @generated from enum value: SortSlice = 2;
   */
  SortSlice = 2,

  /**
   * @generated from enum value: SortPoolSlice = 3;
   */
  SortPoolSlice = 3,

  /**
   * @generated from enum value: PairingHeap = 4;
   */
  PairingHeap = 4,
}

/**
 * Represent a search request.
 *
 * @generated from message payload.v1.Search.Request
 */
export declare class Search_Request extends Message<Search_Request> {
  /**
   * The vector to be searched.
   *
   * @generated from field: repeated float vector = 1;
   */
  vector: number[];

  /**
   * The configuration of the search request.
   *
   * @generated from field: payload.v1.Search.Config config = 2;
   */
  config?: Search_Config;

  constructor(data?: PartialMessage<Search_Request>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Search.Request";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Search_Request;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Search_Request;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Search_Request;

  static equals(a: Search_Request | PlainMessage<Search_Request> | undefined, b: Search_Request | PlainMessage<Search_Request> | undefined): boolean;
}

/**
 * Represent the multiple search request.
 *
 * @generated from message payload.v1.Search.MultiRequest
 */
export declare class Search_MultiRequest extends Message<Search_MultiRequest> {
  /**
   * Represent the multiple search request content.
   *
   * @generated from field: repeated payload.v1.Search.Request requests = 1;
   */
  requests: Search_Request[];

  constructor(data?: PartialMessage<Search_MultiRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Search.MultiRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Search_MultiRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Search_MultiRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Search_MultiRequest;

  static equals(a: Search_MultiRequest | PlainMessage<Search_MultiRequest> | undefined, b: Search_MultiRequest | PlainMessage<Search_MultiRequest> | undefined): boolean;
}

/**
 * Represent a search by ID request.
 *
 * @generated from message payload.v1.Search.IDRequest
 */
export declare class Search_IDRequest extends Message<Search_IDRequest> {
  /**
   * The vector ID to be searched.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The configuration of the search request.
   *
   * @generated from field: payload.v1.Search.Config config = 2;
   */
  config?: Search_Config;

  constructor(data?: PartialMessage<Search_IDRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Search.IDRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Search_IDRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Search_IDRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Search_IDRequest;

  static equals(a: Search_IDRequest | PlainMessage<Search_IDRequest> | undefined, b: Search_IDRequest | PlainMessage<Search_IDRequest> | undefined): boolean;
}

/**
 * Represent the multiple search by ID request.
 *
 * @generated from message payload.v1.Search.MultiIDRequest
 */
export declare class Search_MultiIDRequest extends Message<Search_MultiIDRequest> {
  /**
   * Represent the multiple search by ID request content.
   *
   * @generated from field: repeated payload.v1.Search.IDRequest requests = 1;
   */
  requests: Search_IDRequest[];

  constructor(data?: PartialMessage<Search_MultiIDRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Search.MultiIDRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Search_MultiIDRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Search_MultiIDRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Search_MultiIDRequest;

  static equals(a: Search_MultiIDRequest | PlainMessage<Search_MultiIDRequest> | undefined, b: Search_MultiIDRequest | PlainMessage<Search_MultiIDRequest> | undefined): boolean;
}

/**
 * Represent a search by binary object request.
 *
 * @generated from message payload.v1.Search.ObjectRequest
 */
export declare class Search_ObjectRequest extends Message<Search_ObjectRequest> {
  /**
   * The binary object to be searched.
   *
   * @generated from field: bytes object = 1;
   */
  object: Uint8Array;

  /**
   * The configuration of the search request.
   *
   * @generated from field: payload.v1.Search.Config config = 2;
   */
  config?: Search_Config;

  /**
   * Filter configuration.
   *
   * @generated from field: payload.v1.Filter.Target vectorizer = 3;
   */
  vectorizer?: Filter_Target;

  constructor(data?: PartialMessage<Search_ObjectRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Search.ObjectRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Search_ObjectRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Search_ObjectRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Search_ObjectRequest;

  static equals(a: Search_ObjectRequest | PlainMessage<Search_ObjectRequest> | undefined, b: Search_ObjectRequest | PlainMessage<Search_ObjectRequest> | undefined): boolean;
}

/**
 * Represent the multiple search by binary object request.
 *
 * @generated from message payload.v1.Search.MultiObjectRequest
 */
export declare class Search_MultiObjectRequest extends Message<Search_MultiObjectRequest> {
  /**
   * Represent the multiple search by binary object request content.
   *
   * @generated from field: repeated payload.v1.Search.ObjectRequest requests = 1;
   */
  requests: Search_ObjectRequest[];

  constructor(data?: PartialMessage<Search_MultiObjectRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Search.MultiObjectRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Search_MultiObjectRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Search_MultiObjectRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Search_MultiObjectRequest;

  static equals(a: Search_MultiObjectRequest | PlainMessage<Search_MultiObjectRequest> | undefined, b: Search_MultiObjectRequest | PlainMessage<Search_MultiObjectRequest> | undefined): boolean;
}

/**
 * Represent search configuration.
 *
 * @generated from message payload.v1.Search.Config
 */
export declare class Search_Config extends Message<Search_Config> {
  /**
   * Unique request ID.
   *
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * Maximum number of result to be returned.
   *
   * @generated from field: uint32 num = 2;
   */
  num: number;

  /**
   * Search radius.
   *
   * @generated from field: float radius = 3;
   */
  radius: number;

  /**
   * Search coefficient.
   *
   * @generated from field: float epsilon = 4;
   */
  epsilon: number;

  /**
   * Search timeout in nanoseconds.
   *
   * @generated from field: int64 timeout = 5;
   */
  timeout: bigint;

  /**
   * Ingress filter configurations.
   *
   * @generated from field: payload.v1.Filter.Config ingress_filters = 6;
   */
  ingressFilters?: Filter_Config;

  /**
   * Egress filter configurations.
   *
   * @generated from field: payload.v1.Filter.Config egress_filters = 7;
   */
  egressFilters?: Filter_Config;

  /**
   * Minimum number of result to be returned.
   *
   * @generated from field: uint32 min_num = 8;
   */
  minNum: number;

  /**
   * Aggregation Algorithm
   *
   * @generated from field: payload.v1.Search.AggregationAlgorithm aggregation_algorithm = 9;
   */
  aggregationAlgorithm: Search_AggregationAlgorithm;

  constructor(data?: PartialMessage<Search_Config>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Search.Config";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Search_Config;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Search_Config;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Search_Config;

  static equals(a: Search_Config | PlainMessage<Search_Config> | undefined, b: Search_Config | PlainMessage<Search_Config> | undefined): boolean;
}

/**
 * Represent a search response.
 *
 * @generated from message payload.v1.Search.Response
 */
export declare class Search_Response extends Message<Search_Response> {
  /**
   * The unique request ID.
   *
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * Search results.
   *
   * @generated from field: repeated payload.v1.Object.Distance results = 2;
   */
  results: Object_Distance[];

  constructor(data?: PartialMessage<Search_Response>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Search.Response";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Search_Response;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Search_Response;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Search_Response;

  static equals(a: Search_Response | PlainMessage<Search_Response> | undefined, b: Search_Response | PlainMessage<Search_Response> | undefined): boolean;
}

/**
 * Represent multiple search responses.
 *
 * @generated from message payload.v1.Search.Responses
 */
export declare class Search_Responses extends Message<Search_Responses> {
  /**
   * Represent the multiple search response content.
   *
   * @generated from field: repeated payload.v1.Search.Response responses = 1;
   */
  responses: Search_Response[];

  constructor(data?: PartialMessage<Search_Responses>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Search.Responses";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Search_Responses;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Search_Responses;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Search_Responses;

  static equals(a: Search_Responses | PlainMessage<Search_Responses> | undefined, b: Search_Responses | PlainMessage<Search_Responses> | undefined): boolean;
}

/**
 * Represent stream search response.
 *
 * @generated from message payload.v1.Search.StreamResponse
 */
export declare class Search_StreamResponse extends Message<Search_StreamResponse> {
  /**
   * @generated from oneof payload.v1.Search.StreamResponse.payload
   */
  payload: {
    /**
     * Represent the search response.
     *
     * @generated from field: payload.v1.Search.Response response = 1;
     */
    value: Search_Response;
    case: "response";
  } | {
    /**
     * The RPC error status.
     *
     * @generated from field: google.rpc.Status status = 2;
     */
    value: Status;
    case: "status";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<Search_StreamResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Search.StreamResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Search_StreamResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Search_StreamResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Search_StreamResponse;

  static equals(a: Search_StreamResponse | PlainMessage<Search_StreamResponse> | undefined, b: Search_StreamResponse | PlainMessage<Search_StreamResponse> | undefined): boolean;
}

/**
 * Filter related messages.
 *
 * @generated from message payload.v1.Filter
 */
export declare class Filter extends Message<Filter> {
  constructor(data?: PartialMessage<Filter>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Filter";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Filter;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Filter;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Filter;

  static equals(a: Filter | PlainMessage<Filter> | undefined, b: Filter | PlainMessage<Filter> | undefined): boolean;
}

/**
 * Represent the target filter server.
 *
 * @generated from message payload.v1.Filter.Target
 */
export declare class Filter_Target extends Message<Filter_Target> {
  /**
   * The target hostname.
   *
   * @generated from field: string host = 1;
   */
  host: string;

  /**
   * The target port.
   *
   * @generated from field: uint32 port = 2;
   */
  port: number;

  constructor(data?: PartialMessage<Filter_Target>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Filter.Target";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Filter_Target;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Filter_Target;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Filter_Target;

  static equals(a: Filter_Target | PlainMessage<Filter_Target> | undefined, b: Filter_Target | PlainMessage<Filter_Target> | undefined): boolean;
}

/**
 * Represent filter configuration.
 *
 * @generated from message payload.v1.Filter.Config
 */
export declare class Filter_Config extends Message<Filter_Config> {
  /**
   * Represent the filter target configuration.
   *
   * @generated from field: repeated payload.v1.Filter.Target targets = 1;
   */
  targets: Filter_Target[];

  constructor(data?: PartialMessage<Filter_Config>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Filter.Config";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Filter_Config;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Filter_Config;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Filter_Config;

  static equals(a: Filter_Config | PlainMessage<Filter_Config> | undefined, b: Filter_Config | PlainMessage<Filter_Config> | undefined): boolean;
}

/**
 * Insert related messages.
 *
 * @generated from message payload.v1.Insert
 */
export declare class Insert extends Message<Insert> {
  constructor(data?: PartialMessage<Insert>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Insert";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Insert;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Insert;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Insert;

  static equals(a: Insert | PlainMessage<Insert> | undefined, b: Insert | PlainMessage<Insert> | undefined): boolean;
}

/**
 * Represent the insert request.
 *
 * @generated from message payload.v1.Insert.Request
 */
export declare class Insert_Request extends Message<Insert_Request> {
  /**
   * The vector to be inserted.
   *
   * @generated from field: payload.v1.Object.Vector vector = 1;
   */
  vector?: Object_Vector;

  /**
   * The configuration of the insert request.
   *
   * @generated from field: payload.v1.Insert.Config config = 2;
   */
  config?: Insert_Config;

  constructor(data?: PartialMessage<Insert_Request>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Insert.Request";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Insert_Request;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Insert_Request;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Insert_Request;

  static equals(a: Insert_Request | PlainMessage<Insert_Request> | undefined, b: Insert_Request | PlainMessage<Insert_Request> | undefined): boolean;
}

/**
 * Represent the multiple insert request.
 *
 * @generated from message payload.v1.Insert.MultiRequest
 */
export declare class Insert_MultiRequest extends Message<Insert_MultiRequest> {
  /**
   * Represent multiple insert request content.
   *
   * @generated from field: repeated payload.v1.Insert.Request requests = 1;
   */
  requests: Insert_Request[];

  constructor(data?: PartialMessage<Insert_MultiRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Insert.MultiRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Insert_MultiRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Insert_MultiRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Insert_MultiRequest;

  static equals(a: Insert_MultiRequest | PlainMessage<Insert_MultiRequest> | undefined, b: Insert_MultiRequest | PlainMessage<Insert_MultiRequest> | undefined): boolean;
}

/**
 * Represent the insert by binary object request.
 *
 * @generated from message payload.v1.Insert.ObjectRequest
 */
export declare class Insert_ObjectRequest extends Message<Insert_ObjectRequest> {
  /**
   * The binary object to be inserted.
   *
   * @generated from field: payload.v1.Object.Blob object = 1;
   */
  object?: Object_Blob;

  /**
   * The configuration of the insert request.
   *
   * @generated from field: payload.v1.Insert.Config config = 2;
   */
  config?: Insert_Config;

  /**
   * Filter configurations.
   *
   * @generated from field: payload.v1.Filter.Target vectorizer = 3;
   */
  vectorizer?: Filter_Target;

  constructor(data?: PartialMessage<Insert_ObjectRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Insert.ObjectRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Insert_ObjectRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Insert_ObjectRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Insert_ObjectRequest;

  static equals(a: Insert_ObjectRequest | PlainMessage<Insert_ObjectRequest> | undefined, b: Insert_ObjectRequest | PlainMessage<Insert_ObjectRequest> | undefined): boolean;
}

/**
 * Represent the multiple insert by binary object request.
 *
 * @generated from message payload.v1.Insert.MultiObjectRequest
 */
export declare class Insert_MultiObjectRequest extends Message<Insert_MultiObjectRequest> {
  /**
   * Represent multiple insert by object content.
   *
   * @generated from field: repeated payload.v1.Insert.ObjectRequest requests = 1;
   */
  requests: Insert_ObjectRequest[];

  constructor(data?: PartialMessage<Insert_MultiObjectRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Insert.MultiObjectRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Insert_MultiObjectRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Insert_MultiObjectRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Insert_MultiObjectRequest;

  static equals(a: Insert_MultiObjectRequest | PlainMessage<Insert_MultiObjectRequest> | undefined, b: Insert_MultiObjectRequest | PlainMessage<Insert_MultiObjectRequest> | undefined): boolean;
}

/**
 * Represent insert configurations.
 *
 * @generated from message payload.v1.Insert.Config
 */
export declare class Insert_Config extends Message<Insert_Config> {
  /**
   * A flag to skip exist check during insert operation.
   *
   * @generated from field: bool skip_strict_exist_check = 1;
   */
  skipStrictExistCheck: boolean;

  /**
   * Filter configurations.
   *
   * @generated from field: payload.v1.Filter.Config filters = 2;
   */
  filters?: Filter_Config;

  /**
   * Insert timestamp.
   *
   * @generated from field: int64 timestamp = 3;
   */
  timestamp: bigint;

  constructor(data?: PartialMessage<Insert_Config>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Insert.Config";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Insert_Config;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Insert_Config;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Insert_Config;

  static equals(a: Insert_Config | PlainMessage<Insert_Config> | undefined, b: Insert_Config | PlainMessage<Insert_Config> | undefined): boolean;
}

/**
 * Update related messages
 *
 * @generated from message payload.v1.Update
 */
export declare class Update extends Message<Update> {
  constructor(data?: PartialMessage<Update>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Update";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Update;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Update;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Update;

  static equals(a: Update | PlainMessage<Update> | undefined, b: Update | PlainMessage<Update> | undefined): boolean;
}

/**
 * Represent the update request.
 *
 * @generated from message payload.v1.Update.Request
 */
export declare class Update_Request extends Message<Update_Request> {
  /**
   * The vector to be updated.
   *
   * @generated from field: payload.v1.Object.Vector vector = 1;
   */
  vector?: Object_Vector;

  /**
   * The configuration of the update request.
   *
   * @generated from field: payload.v1.Update.Config config = 2;
   */
  config?: Update_Config;

  constructor(data?: PartialMessage<Update_Request>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Update.Request";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Update_Request;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Update_Request;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Update_Request;

  static equals(a: Update_Request | PlainMessage<Update_Request> | undefined, b: Update_Request | PlainMessage<Update_Request> | undefined): boolean;
}

/**
 * Represent the multiple update request.
 *
 * @generated from message payload.v1.Update.MultiRequest
 */
export declare class Update_MultiRequest extends Message<Update_MultiRequest> {
  /**
   * Represent the multiple update request content.
   *
   * @generated from field: repeated payload.v1.Update.Request requests = 1;
   */
  requests: Update_Request[];

  constructor(data?: PartialMessage<Update_MultiRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Update.MultiRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Update_MultiRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Update_MultiRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Update_MultiRequest;

  static equals(a: Update_MultiRequest | PlainMessage<Update_MultiRequest> | undefined, b: Update_MultiRequest | PlainMessage<Update_MultiRequest> | undefined): boolean;
}

/**
 * Represent the update binary object request.
 *
 * @generated from message payload.v1.Update.ObjectRequest
 */
export declare class Update_ObjectRequest extends Message<Update_ObjectRequest> {
  /**
   * The binary object to be updated.
   *
   * @generated from field: payload.v1.Object.Blob object = 1;
   */
  object?: Object_Blob;

  /**
   * The configuration of the update request.
   *
   * @generated from field: payload.v1.Update.Config config = 2;
   */
  config?: Update_Config;

  /**
   * Filter target.
   *
   * @generated from field: payload.v1.Filter.Target vectorizer = 3;
   */
  vectorizer?: Filter_Target;

  constructor(data?: PartialMessage<Update_ObjectRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Update.ObjectRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Update_ObjectRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Update_ObjectRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Update_ObjectRequest;

  static equals(a: Update_ObjectRequest | PlainMessage<Update_ObjectRequest> | undefined, b: Update_ObjectRequest | PlainMessage<Update_ObjectRequest> | undefined): boolean;
}

/**
 * Represent the multiple update binary object request.
 *
 * @generated from message payload.v1.Update.MultiObjectRequest
 */
export declare class Update_MultiObjectRequest extends Message<Update_MultiObjectRequest> {
  /**
   * Represent the multiple update object request content.
   *
   * @generated from field: repeated payload.v1.Update.ObjectRequest requests = 1;
   */
  requests: Update_ObjectRequest[];

  constructor(data?: PartialMessage<Update_MultiObjectRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Update.MultiObjectRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Update_MultiObjectRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Update_MultiObjectRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Update_MultiObjectRequest;

  static equals(a: Update_MultiObjectRequest | PlainMessage<Update_MultiObjectRequest> | undefined, b: Update_MultiObjectRequest | PlainMessage<Update_MultiObjectRequest> | undefined): boolean;
}

/**
 * Represent the update configuration.
 *
 * @generated from message payload.v1.Update.Config
 */
export declare class Update_Config extends Message<Update_Config> {
  /**
   * A flag to skip exist check during update operation.
   *
   * @generated from field: bool skip_strict_exist_check = 1;
   */
  skipStrictExistCheck: boolean;

  /**
   * Filter configuration.
   *
   * @generated from field: payload.v1.Filter.Config filters = 2;
   */
  filters?: Filter_Config;

  /**
   * Update timestamp.
   *
   * @generated from field: int64 timestamp = 3;
   */
  timestamp: bigint;

  /**
   * A flag to disable balanced update (split remove -> insert operation)
   * during update operation.
   *
   * @generated from field: bool disable_balanced_update = 4;
   */
  disableBalancedUpdate: boolean;

  constructor(data?: PartialMessage<Update_Config>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Update.Config";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Update_Config;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Update_Config;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Update_Config;

  static equals(a: Update_Config | PlainMessage<Update_Config> | undefined, b: Update_Config | PlainMessage<Update_Config> | undefined): boolean;
}

/**
 * Upsert related messages.
 *
 * @generated from message payload.v1.Upsert
 */
export declare class Upsert extends Message<Upsert> {
  constructor(data?: PartialMessage<Upsert>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Upsert";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Upsert;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Upsert;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Upsert;

  static equals(a: Upsert | PlainMessage<Upsert> | undefined, b: Upsert | PlainMessage<Upsert> | undefined): boolean;
}

/**
 * Represent the upsert request.
 *
 * @generated from message payload.v1.Upsert.Request
 */
export declare class Upsert_Request extends Message<Upsert_Request> {
  /**
   * The vector to be upserted.
   *
   * @generated from field: payload.v1.Object.Vector vector = 1;
   */
  vector?: Object_Vector;

  /**
   * The configuration of the upsert request.
   *
   * @generated from field: payload.v1.Upsert.Config config = 2;
   */
  config?: Upsert_Config;

  constructor(data?: PartialMessage<Upsert_Request>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Upsert.Request";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Upsert_Request;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Upsert_Request;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Upsert_Request;

  static equals(a: Upsert_Request | PlainMessage<Upsert_Request> | undefined, b: Upsert_Request | PlainMessage<Upsert_Request> | undefined): boolean;
}

/**
 * Represent mthe ultiple upsert request.
 *
 * @generated from message payload.v1.Upsert.MultiRequest
 */
export declare class Upsert_MultiRequest extends Message<Upsert_MultiRequest> {
  /**
   * Represent the multiple upsert request content.
   *
   * @generated from field: repeated payload.v1.Upsert.Request requests = 1;
   */
  requests: Upsert_Request[];

  constructor(data?: PartialMessage<Upsert_MultiRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Upsert.MultiRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Upsert_MultiRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Upsert_MultiRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Upsert_MultiRequest;

  static equals(a: Upsert_MultiRequest | PlainMessage<Upsert_MultiRequest> | undefined, b: Upsert_MultiRequest | PlainMessage<Upsert_MultiRequest> | undefined): boolean;
}

/**
 * Represent the upsert binary object request.
 *
 * @generated from message payload.v1.Upsert.ObjectRequest
 */
export declare class Upsert_ObjectRequest extends Message<Upsert_ObjectRequest> {
  /**
   * The binary object to be upserted.
   *
   * @generated from field: payload.v1.Object.Blob object = 1;
   */
  object?: Object_Blob;

  /**
   * The configuration of the upsert request.
   *
   * @generated from field: payload.v1.Upsert.Config config = 2;
   */
  config?: Upsert_Config;

  /**
   * Filter target.
   *
   * @generated from field: payload.v1.Filter.Target vectorizer = 3;
   */
  vectorizer?: Filter_Target;

  constructor(data?: PartialMessage<Upsert_ObjectRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Upsert.ObjectRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Upsert_ObjectRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Upsert_ObjectRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Upsert_ObjectRequest;

  static equals(a: Upsert_ObjectRequest | PlainMessage<Upsert_ObjectRequest> | undefined, b: Upsert_ObjectRequest | PlainMessage<Upsert_ObjectRequest> | undefined): boolean;
}

/**
 * Represent the multiple upsert binary object request.
 *
 * @generated from message payload.v1.Upsert.MultiObjectRequest
 */
export declare class Upsert_MultiObjectRequest extends Message<Upsert_MultiObjectRequest> {
  /**
   * Represent the multiple upsert object request content.
   *
   * @generated from field: repeated payload.v1.Upsert.ObjectRequest requests = 1;
   */
  requests: Upsert_ObjectRequest[];

  constructor(data?: PartialMessage<Upsert_MultiObjectRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Upsert.MultiObjectRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Upsert_MultiObjectRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Upsert_MultiObjectRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Upsert_MultiObjectRequest;

  static equals(a: Upsert_MultiObjectRequest | PlainMessage<Upsert_MultiObjectRequest> | undefined, b: Upsert_MultiObjectRequest | PlainMessage<Upsert_MultiObjectRequest> | undefined): boolean;
}

/**
 * Represent the upsert configuration.
 *
 * @generated from message payload.v1.Upsert.Config
 */
export declare class Upsert_Config extends Message<Upsert_Config> {
  /**
   * A flag to skip exist check during upsert operation.
   *
   * @generated from field: bool skip_strict_exist_check = 1;
   */
  skipStrictExistCheck: boolean;

  /**
   * Filter configuration.
   *
   * @generated from field: payload.v1.Filter.Config filters = 2;
   */
  filters?: Filter_Config;

  /**
   * Upsert timestamp.
   *
   * @generated from field: int64 timestamp = 3;
   */
  timestamp: bigint;

  /**
   * A flag to disable balanced update (split remove -> insert operation)
   * during update operation.
   *
   * @generated from field: bool disable_balanced_update = 4;
   */
  disableBalancedUpdate: boolean;

  constructor(data?: PartialMessage<Upsert_Config>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Upsert.Config";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Upsert_Config;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Upsert_Config;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Upsert_Config;

  static equals(a: Upsert_Config | PlainMessage<Upsert_Config> | undefined, b: Upsert_Config | PlainMessage<Upsert_Config> | undefined): boolean;
}

/**
 * Remove related messages.
 *
 * @generated from message payload.v1.Remove
 */
export declare class Remove extends Message<Remove> {
  constructor(data?: PartialMessage<Remove>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Remove";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Remove;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Remove;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Remove;

  static equals(a: Remove | PlainMessage<Remove> | undefined, b: Remove | PlainMessage<Remove> | undefined): boolean;
}

/**
 * Represent the remove request.
 *
 * @generated from message payload.v1.Remove.Request
 */
export declare class Remove_Request extends Message<Remove_Request> {
  /**
   * The object ID to be removed.
   *
   * @generated from field: payload.v1.Object.ID id = 1;
   */
  id?: Object_ID;

  /**
   * The configuration of the remove request.
   *
   * @generated from field: payload.v1.Remove.Config config = 2;
   */
  config?: Remove_Config;

  constructor(data?: PartialMessage<Remove_Request>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Remove.Request";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Remove_Request;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Remove_Request;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Remove_Request;

  static equals(a: Remove_Request | PlainMessage<Remove_Request> | undefined, b: Remove_Request | PlainMessage<Remove_Request> | undefined): boolean;
}

/**
 * Represent the multiple remove request.
 *
 * @generated from message payload.v1.Remove.MultiRequest
 */
export declare class Remove_MultiRequest extends Message<Remove_MultiRequest> {
  /**
   * Represent the multiple remove request content.
   *
   * @generated from field: repeated payload.v1.Remove.Request requests = 1;
   */
  requests: Remove_Request[];

  constructor(data?: PartialMessage<Remove_MultiRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Remove.MultiRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Remove_MultiRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Remove_MultiRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Remove_MultiRequest;

  static equals(a: Remove_MultiRequest | PlainMessage<Remove_MultiRequest> | undefined, b: Remove_MultiRequest | PlainMessage<Remove_MultiRequest> | undefined): boolean;
}

/**
 * Represent the remove request based on timestamp.
 *
 * @generated from message payload.v1.Remove.TimestampRequest
 */
export declare class Remove_TimestampRequest extends Message<Remove_TimestampRequest> {
  /**
   * The timestamp comparison list. If more than one is specified, the `AND` search is applied.
   *
   * @generated from field: repeated payload.v1.Remove.Timestamp timestamps = 1;
   */
  timestamps: Remove_Timestamp[];

  constructor(data?: PartialMessage<Remove_TimestampRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Remove.TimestampRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Remove_TimestampRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Remove_TimestampRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Remove_TimestampRequest;

  static equals(a: Remove_TimestampRequest | PlainMessage<Remove_TimestampRequest> | undefined, b: Remove_TimestampRequest | PlainMessage<Remove_TimestampRequest> | undefined): boolean;
}

/**
 * Represent the timestamp comparison.
 *
 * @generated from message payload.v1.Remove.Timestamp
 */
export declare class Remove_Timestamp extends Message<Remove_Timestamp> {
  /**
   * The timestamp.
   *
   * @generated from field: int64 timestamp = 1;
   */
  timestamp: bigint;

  /**
   * The conditional operator.
   *
   * @generated from field: payload.v1.Remove.Timestamp.Operator operator = 2;
   */
  operator: Remove_Timestamp_Operator;

  constructor(data?: PartialMessage<Remove_Timestamp>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Remove.Timestamp";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Remove_Timestamp;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Remove_Timestamp;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Remove_Timestamp;

  static equals(a: Remove_Timestamp | PlainMessage<Remove_Timestamp> | undefined, b: Remove_Timestamp | PlainMessage<Remove_Timestamp> | undefined): boolean;
}

/**
 * Operator is enum of each conditional operator.
 *
 * @generated from enum payload.v1.Remove.Timestamp.Operator
 */
export declare enum Remove_Timestamp_Operator {
  /**
   * The timestamp is equal to the specified value in the request.
   *
   * @generated from enum value: Eq = 0;
   */
  Eq = 0,

  /**
   * The timestamp is not equal to the specified value in the request.
   *
   * @generated from enum value: Ne = 1;
   */
  Ne = 1,

  /**
   * The timestamp is greater than or equal to the specified value in the request.
   *
   * @generated from enum value: Ge = 2;
   */
  Ge = 2,

  /**
   * The timestamp is greater than the specified value in the request.
   *
   * @generated from enum value: Gt = 3;
   */
  Gt = 3,

  /**
   * The timestamp is less than or equal to the specified value in the request.
   *
   * @generated from enum value: Le = 4;
   */
  Le = 4,

  /**
   * The timestamp is less than the specified value in the request.
   *
   * @generated from enum value: Lt = 5;
   */
  Lt = 5,
}

/**
 * Represent the remove configuration.
 *
 * @generated from message payload.v1.Remove.Config
 */
export declare class Remove_Config extends Message<Remove_Config> {
  /**
   * A flag to skip exist check during upsert operation.
   *
   * @generated from field: bool skip_strict_exist_check = 1;
   */
  skipStrictExistCheck: boolean;

  /**
   * Remove timestamp.
   *
   * @generated from field: int64 timestamp = 3;
   */
  timestamp: bigint;

  constructor(data?: PartialMessage<Remove_Config>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Remove.Config";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Remove_Config;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Remove_Config;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Remove_Config;

  static equals(a: Remove_Config | PlainMessage<Remove_Config> | undefined, b: Remove_Config | PlainMessage<Remove_Config> | undefined): boolean;
}

/**
 * Common messages.
 *
 * @generated from message payload.v1.Object
 */
export declare class Object$ extends Message<Object$> {
  constructor(data?: PartialMessage<Object$>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Object";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object$;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object$;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object$;

  static equals(a: Object$ | PlainMessage<Object$> | undefined, b: Object$ | PlainMessage<Object$> | undefined): boolean;
}

/**
 * Represent a request to fetch raw vector.
 *
 * @generated from message payload.v1.Object.VectorRequest
 */
export declare class Object_VectorRequest extends Message<Object_VectorRequest> {
  /**
   * The vector ID to be fetched.
   *
   * @generated from field: payload.v1.Object.ID id = 1;
   */
  id?: Object_ID;

  /**
   * Filter configurations.
   *
   * @generated from field: payload.v1.Filter.Config filters = 2;
   */
  filters?: Filter_Config;

  constructor(data?: PartialMessage<Object_VectorRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Object.VectorRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object_VectorRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object_VectorRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object_VectorRequest;

  static equals(a: Object_VectorRequest | PlainMessage<Object_VectorRequest> | undefined, b: Object_VectorRequest | PlainMessage<Object_VectorRequest> | undefined): boolean;
}

/**
 * Represent the ID and distance pair.
 *
 * @generated from message payload.v1.Object.Distance
 */
export declare class Object_Distance extends Message<Object_Distance> {
  /**
   * The vector ID.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The distance.
   *
   * @generated from field: float distance = 2;
   */
  distance: number;

  constructor(data?: PartialMessage<Object_Distance>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Object.Distance";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object_Distance;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object_Distance;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object_Distance;

  static equals(a: Object_Distance | PlainMessage<Object_Distance> | undefined, b: Object_Distance | PlainMessage<Object_Distance> | undefined): boolean;
}

/**
 * Represent stream response of distances.
 *
 * @generated from message payload.v1.Object.StreamDistance
 */
export declare class Object_StreamDistance extends Message<Object_StreamDistance> {
  /**
   * @generated from oneof payload.v1.Object.StreamDistance.payload
   */
  payload: {
    /**
     * The distance.
     *
     * @generated from field: payload.v1.Object.Distance distance = 1;
     */
    value: Object_Distance;
    case: "distance";
  } | {
    /**
     * The RPC error status.
     *
     * @generated from field: google.rpc.Status status = 2;
     */
    value: Status;
    case: "status";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<Object_StreamDistance>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Object.StreamDistance";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object_StreamDistance;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object_StreamDistance;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object_StreamDistance;

  static equals(a: Object_StreamDistance | PlainMessage<Object_StreamDistance> | undefined, b: Object_StreamDistance | PlainMessage<Object_StreamDistance> | undefined): boolean;
}

/**
 * Represent the vector ID.
 *
 * @generated from message payload.v1.Object.ID
 */
export declare class Object_ID extends Message<Object_ID> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  constructor(data?: PartialMessage<Object_ID>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Object.ID";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object_ID;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object_ID;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object_ID;

  static equals(a: Object_ID | PlainMessage<Object_ID> | undefined, b: Object_ID | PlainMessage<Object_ID> | undefined): boolean;
}

/**
 * Represent multiple vector IDs.
 *
 * @generated from message payload.v1.Object.IDs
 */
export declare class Object_IDs extends Message<Object_IDs> {
  /**
   * @generated from field: repeated string ids = 1;
   */
  ids: string[];

  constructor(data?: PartialMessage<Object_IDs>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Object.IDs";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object_IDs;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object_IDs;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object_IDs;

  static equals(a: Object_IDs | PlainMessage<Object_IDs> | undefined, b: Object_IDs | PlainMessage<Object_IDs> | undefined): boolean;
}

/**
 * Represent a vector.
 *
 * @generated from message payload.v1.Object.Vector
 */
export declare class Object_Vector extends Message<Object_Vector> {
  /**
   * The vector ID.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The vector.
   *
   * @generated from field: repeated float vector = 2;
   */
  vector: number[];

  /**
   * timestamp represents when this vector inserted.
   *
   * @generated from field: int64 timestamp = 3;
   */
  timestamp: bigint;

  constructor(data?: PartialMessage<Object_Vector>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Object.Vector";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object_Vector;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object_Vector;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object_Vector;

  static equals(a: Object_Vector | PlainMessage<Object_Vector> | undefined, b: Object_Vector | PlainMessage<Object_Vector> | undefined): boolean;
}

/**
 * Represent a request to fetch vector meta data.
 *
 * @generated from message payload.v1.Object.GetTimestampRequest
 */
export declare class Object_GetTimestampRequest extends Message<Object_GetTimestampRequest> {
  /**
   * The vector ID to be fetched.
   *
   * @generated from field: payload.v1.Object.ID id = 1;
   */
  id?: Object_ID;

  constructor(data?: PartialMessage<Object_GetTimestampRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Object.GetTimestampRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object_GetTimestampRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object_GetTimestampRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object_GetTimestampRequest;

  static equals(a: Object_GetTimestampRequest | PlainMessage<Object_GetTimestampRequest> | undefined, b: Object_GetTimestampRequest | PlainMessage<Object_GetTimestampRequest> | undefined): boolean;
}

/**
 * Represent a vector meta data.
 *
 * @generated from message payload.v1.Object.Timestamp
 */
export declare class Object_Timestamp extends Message<Object_Timestamp> {
  /**
   * The vector ID.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * timestamp represents when this vector inserted.
   *
   * @generated from field: int64 timestamp = 2;
   */
  timestamp: bigint;

  constructor(data?: PartialMessage<Object_Timestamp>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Object.Timestamp";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object_Timestamp;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object_Timestamp;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object_Timestamp;

  static equals(a: Object_Timestamp | PlainMessage<Object_Timestamp> | undefined, b: Object_Timestamp | PlainMessage<Object_Timestamp> | undefined): boolean;
}

/**
 * Represent multiple vectors.
 *
 * @generated from message payload.v1.Object.Vectors
 */
export declare class Object_Vectors extends Message<Object_Vectors> {
  /**
   * @generated from field: repeated payload.v1.Object.Vector vectors = 1;
   */
  vectors: Object_Vector[];

  constructor(data?: PartialMessage<Object_Vectors>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Object.Vectors";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object_Vectors;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object_Vectors;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object_Vectors;

  static equals(a: Object_Vectors | PlainMessage<Object_Vectors> | undefined, b: Object_Vectors | PlainMessage<Object_Vectors> | undefined): boolean;
}

/**
 * Represent stream response of the vector.
 *
 * @generated from message payload.v1.Object.StreamVector
 */
export declare class Object_StreamVector extends Message<Object_StreamVector> {
  /**
   * @generated from oneof payload.v1.Object.StreamVector.payload
   */
  payload: {
    /**
     * The vector.
     *
     * @generated from field: payload.v1.Object.Vector vector = 1;
     */
    value: Object_Vector;
    case: "vector";
  } | {
    /**
     * The RPC error status.
     *
     * @generated from field: google.rpc.Status status = 2;
     */
    value: Status;
    case: "status";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<Object_StreamVector>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Object.StreamVector";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object_StreamVector;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object_StreamVector;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object_StreamVector;

  static equals(a: Object_StreamVector | PlainMessage<Object_StreamVector> | undefined, b: Object_StreamVector | PlainMessage<Object_StreamVector> | undefined): boolean;
}

/**
 * Represent reshape vector.
 *
 * @generated from message payload.v1.Object.ReshapeVector
 */
export declare class Object_ReshapeVector extends Message<Object_ReshapeVector> {
  /**
   * The binary object.
   *
   * @generated from field: bytes object = 1;
   */
  object: Uint8Array;

  /**
   * The new shape.
   *
   * @generated from field: repeated int32 shape = 2;
   */
  shape: number[];

  constructor(data?: PartialMessage<Object_ReshapeVector>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Object.ReshapeVector";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object_ReshapeVector;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object_ReshapeVector;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object_ReshapeVector;

  static equals(a: Object_ReshapeVector | PlainMessage<Object_ReshapeVector> | undefined, b: Object_ReshapeVector | PlainMessage<Object_ReshapeVector> | undefined): boolean;
}

/**
 * Represent the binary object.
 *
 * @generated from message payload.v1.Object.Blob
 */
export declare class Object_Blob extends Message<Object_Blob> {
  /**
   * The object ID.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The binary object.
   *
   * @generated from field: bytes object = 2;
   */
  object: Uint8Array;

  constructor(data?: PartialMessage<Object_Blob>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Object.Blob";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object_Blob;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object_Blob;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object_Blob;

  static equals(a: Object_Blob | PlainMessage<Object_Blob> | undefined, b: Object_Blob | PlainMessage<Object_Blob> | undefined): boolean;
}

/**
 * Represent stream response of binary objects.
 *
 * @generated from message payload.v1.Object.StreamBlob
 */
export declare class Object_StreamBlob extends Message<Object_StreamBlob> {
  /**
   * @generated from oneof payload.v1.Object.StreamBlob.payload
   */
  payload: {
    /**
     * The binary object.
     *
     * @generated from field: payload.v1.Object.Blob blob = 1;
     */
    value: Object_Blob;
    case: "blob";
  } | {
    /**
     * The RPC error status.
     *
     * @generated from field: google.rpc.Status status = 2;
     */
    value: Status;
    case: "status";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<Object_StreamBlob>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Object.StreamBlob";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object_StreamBlob;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object_StreamBlob;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object_StreamBlob;

  static equals(a: Object_StreamBlob | PlainMessage<Object_StreamBlob> | undefined, b: Object_StreamBlob | PlainMessage<Object_StreamBlob> | undefined): boolean;
}

/**
 * Represent the vector location.
 *
 * @generated from message payload.v1.Object.Location
 */
export declare class Object_Location extends Message<Object_Location> {
  /**
   * The name of the location.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The UUID of the vector.
   *
   * @generated from field: string uuid = 2;
   */
  uuid: string;

  /**
   * The IP list.
   *
   * @generated from field: repeated string ips = 3;
   */
  ips: string[];

  constructor(data?: PartialMessage<Object_Location>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Object.Location";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object_Location;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object_Location;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object_Location;

  static equals(a: Object_Location | PlainMessage<Object_Location> | undefined, b: Object_Location | PlainMessage<Object_Location> | undefined): boolean;
}

/**
 * Represent the stream response of the vector location.
 *
 * @generated from message payload.v1.Object.StreamLocation
 */
export declare class Object_StreamLocation extends Message<Object_StreamLocation> {
  /**
   * @generated from oneof payload.v1.Object.StreamLocation.payload
   */
  payload: {
    /**
     * The vector location.
     *
     * @generated from field: payload.v1.Object.Location location = 1;
     */
    value: Object_Location;
    case: "location";
  } | {
    /**
     * The RPC error status.
     *
     * @generated from field: google.rpc.Status status = 2;
     */
    value: Status;
    case: "status";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<Object_StreamLocation>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Object.StreamLocation";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object_StreamLocation;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object_StreamLocation;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object_StreamLocation;

  static equals(a: Object_StreamLocation | PlainMessage<Object_StreamLocation> | undefined, b: Object_StreamLocation | PlainMessage<Object_StreamLocation> | undefined): boolean;
}

/**
 * Represent multiple vector locations.
 *
 * @generated from message payload.v1.Object.Locations
 */
export declare class Object_Locations extends Message<Object_Locations> {
  /**
   * @generated from field: repeated payload.v1.Object.Location locations = 1;
   */
  locations: Object_Location[];

  constructor(data?: PartialMessage<Object_Locations>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Object.Locations";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object_Locations;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object_Locations;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object_Locations;

  static equals(a: Object_Locations | PlainMessage<Object_Locations> | undefined, b: Object_Locations | PlainMessage<Object_Locations> | undefined): boolean;
}

/**
 * Represent the list object vector stream request and response.
 *
 * @generated from message payload.v1.Object.List
 */
export declare class Object_List extends Message<Object_List> {
  constructor(data?: PartialMessage<Object_List>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Object.List";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object_List;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object_List;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object_List;

  static equals(a: Object_List | PlainMessage<Object_List> | undefined, b: Object_List | PlainMessage<Object_List> | undefined): boolean;
}

/**
 * @generated from message payload.v1.Object.List.Request
 */
export declare class Object_List_Request extends Message<Object_List_Request> {
  constructor(data?: PartialMessage<Object_List_Request>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Object.List.Request";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object_List_Request;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object_List_Request;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object_List_Request;

  static equals(a: Object_List_Request | PlainMessage<Object_List_Request> | undefined, b: Object_List_Request | PlainMessage<Object_List_Request> | undefined): boolean;
}

/**
 * @generated from message payload.v1.Object.List.Response
 */
export declare class Object_List_Response extends Message<Object_List_Response> {
  /**
   * @generated from oneof payload.v1.Object.List.Response.payload
   */
  payload: {
    /**
     * The vector
     *
     * @generated from field: payload.v1.Object.Vector vector = 1;
     */
    value: Object_Vector;
    case: "vector";
  } | {
    /**
     * The RPC error status.
     *
     * @generated from field: google.rpc.Status status = 2;
     */
    value: Status;
    case: "status";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<Object_List_Response>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Object.List.Response";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object_List_Response;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object_List_Response;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object_List_Response;

  static equals(a: Object_List_Response | PlainMessage<Object_List_Response> | undefined, b: Object_List_Response | PlainMessage<Object_List_Response> | undefined): boolean;
}

/**
 * Control related messages.
 *
 * @generated from message payload.v1.Control
 */
export declare class Control extends Message<Control> {
  constructor(data?: PartialMessage<Control>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Control";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Control;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Control;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Control;

  static equals(a: Control | PlainMessage<Control> | undefined, b: Control | PlainMessage<Control> | undefined): boolean;
}

/**
 * Represent the create index request.
 *
 * @generated from message payload.v1.Control.CreateIndexRequest
 */
export declare class Control_CreateIndexRequest extends Message<Control_CreateIndexRequest> {
  /**
   * The pool size of the create index operation.
   *
   * @generated from field: uint32 pool_size = 1;
   */
  poolSize: number;

  constructor(data?: PartialMessage<Control_CreateIndexRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Control.CreateIndexRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Control_CreateIndexRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Control_CreateIndexRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Control_CreateIndexRequest;

  static equals(a: Control_CreateIndexRequest | PlainMessage<Control_CreateIndexRequest> | undefined, b: Control_CreateIndexRequest | PlainMessage<Control_CreateIndexRequest> | undefined): boolean;
}

/**
 * Discoverer related messages.
 *
 * @generated from message payload.v1.Discoverer
 */
export declare class Discoverer extends Message<Discoverer> {
  constructor(data?: PartialMessage<Discoverer>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Discoverer";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Discoverer;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Discoverer;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Discoverer;

  static equals(a: Discoverer | PlainMessage<Discoverer> | undefined, b: Discoverer | PlainMessage<Discoverer> | undefined): boolean;
}

/**
 * Represent the dicoverer request.
 *
 * @generated from message payload.v1.Discoverer.Request
 */
export declare class Discoverer_Request extends Message<Discoverer_Request> {
  /**
   * The agent name to be discovered.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The namespace to be discovered.
   *
   * @generated from field: string namespace = 2;
   */
  namespace: string;

  /**
   * The node to be discovered.
   *
   * @generated from field: string node = 3;
   */
  node: string;

  constructor(data?: PartialMessage<Discoverer_Request>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Discoverer.Request";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Discoverer_Request;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Discoverer_Request;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Discoverer_Request;

  static equals(a: Discoverer_Request | PlainMessage<Discoverer_Request> | undefined, b: Discoverer_Request | PlainMessage<Discoverer_Request> | undefined): boolean;
}

/**
 * Info related messages.
 *
 * @generated from message payload.v1.Info
 */
export declare class Info extends Message<Info> {
  constructor(data?: PartialMessage<Info>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Info";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Info;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Info;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Info;

  static equals(a: Info | PlainMessage<Info> | undefined, b: Info | PlainMessage<Info> | undefined): boolean;
}

/**
 * Represent the index information messages.
 *
 * @generated from message payload.v1.Info.Index
 */
export declare class Info_Index extends Message<Info_Index> {
  constructor(data?: PartialMessage<Info_Index>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Info.Index";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Info_Index;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Info_Index;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Info_Index;

  static equals(a: Info_Index | PlainMessage<Info_Index> | undefined, b: Info_Index | PlainMessage<Info_Index> | undefined): boolean;
}

/**
 * Represent the index count message.
 *
 * @generated from message payload.v1.Info.Index.Count
 */
export declare class Info_Index_Count extends Message<Info_Index_Count> {
  /**
   * The stored index count.
   *
   * @generated from field: uint32 stored = 1;
   */
  stored: number;

  /**
   * The uncommitted index count.
   *
   * @generated from field: uint32 uncommitted = 2;
   */
  uncommitted: number;

  /**
   * The indexing index count.
   *
   * @generated from field: bool indexing = 3;
   */
  indexing: boolean;

  /**
   * The saving index count.
   *
   * @generated from field: bool saving = 4;
   */
  saving: boolean;

  constructor(data?: PartialMessage<Info_Index_Count>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Info.Index.Count";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Info_Index_Count;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Info_Index_Count;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Info_Index_Count;

  static equals(a: Info_Index_Count | PlainMessage<Info_Index_Count> | undefined, b: Info_Index_Count | PlainMessage<Info_Index_Count> | undefined): boolean;
}

/**
 * Represent the UUID message.
 *
 * @generated from message payload.v1.Info.Index.UUID
 */
export declare class Info_Index_UUID extends Message<Info_Index_UUID> {
  constructor(data?: PartialMessage<Info_Index_UUID>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Info.Index.UUID";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Info_Index_UUID;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Info_Index_UUID;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Info_Index_UUID;

  static equals(a: Info_Index_UUID | PlainMessage<Info_Index_UUID> | undefined, b: Info_Index_UUID | PlainMessage<Info_Index_UUID> | undefined): boolean;
}

/**
 * The committed UUID.
 *
 * @generated from message payload.v1.Info.Index.UUID.Committed
 */
export declare class Info_Index_UUID_Committed extends Message<Info_Index_UUID_Committed> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid: string;

  constructor(data?: PartialMessage<Info_Index_UUID_Committed>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Info.Index.UUID.Committed";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Info_Index_UUID_Committed;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Info_Index_UUID_Committed;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Info_Index_UUID_Committed;

  static equals(a: Info_Index_UUID_Committed | PlainMessage<Info_Index_UUID_Committed> | undefined, b: Info_Index_UUID_Committed | PlainMessage<Info_Index_UUID_Committed> | undefined): boolean;
}

/**
 * The uncommitted UUID.
 *
 * @generated from message payload.v1.Info.Index.UUID.Uncommitted
 */
export declare class Info_Index_UUID_Uncommitted extends Message<Info_Index_UUID_Uncommitted> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid: string;

  constructor(data?: PartialMessage<Info_Index_UUID_Uncommitted>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Info.Index.UUID.Uncommitted";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Info_Index_UUID_Uncommitted;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Info_Index_UUID_Uncommitted;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Info_Index_UUID_Uncommitted;

  static equals(a: Info_Index_UUID_Uncommitted | PlainMessage<Info_Index_UUID_Uncommitted> | undefined, b: Info_Index_UUID_Uncommitted | PlainMessage<Info_Index_UUID_Uncommitted> | undefined): boolean;
}

/**
 * Represent the pod information message.
 *
 * @generated from message payload.v1.Info.Pod
 */
export declare class Info_Pod extends Message<Info_Pod> {
  /**
   * The app name of the pod on the label.
   *
   * @generated from field: string app_name = 1;
   */
  appName: string;

  /**
   * The name of the pod.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * The namespace of the pod.
   *
   * @generated from field: string namespace = 3;
   */
  namespace: string;

  /**
   * The IP of the pod.
   *
   * @generated from field: string ip = 4;
   */
  ip: string;

  /**
   * The CPU information of the pod.
   *
   * @generated from field: payload.v1.Info.CPU cpu = 5;
   */
  cpu?: Info_CPU;

  /**
   * The memory information of the pod.
   *
   * @generated from field: payload.v1.Info.Memory memory = 6;
   */
  memory?: Info_Memory;

  /**
   * The node information of the pod.
   *
   * @generated from field: payload.v1.Info.Node node = 7;
   */
  node?: Info_Node;

  constructor(data?: PartialMessage<Info_Pod>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Info.Pod";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Info_Pod;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Info_Pod;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Info_Pod;

  static equals(a: Info_Pod | PlainMessage<Info_Pod> | undefined, b: Info_Pod | PlainMessage<Info_Pod> | undefined): boolean;
}

/**
 * Represent the node information message.
 *
 * @generated from message payload.v1.Info.Node
 */
export declare class Info_Node extends Message<Info_Node> {
  /**
   * The name of the node.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The internal IP address of the node.
   *
   * @generated from field: string internal_addr = 2;
   */
  internalAddr: string;

  /**
   * The external IP address of the node.
   *
   * @generated from field: string external_addr = 3;
   */
  externalAddr: string;

  /**
   * The CPU information of the node.
   *
   * @generated from field: payload.v1.Info.CPU cpu = 4;
   */
  cpu?: Info_CPU;

  /**
   * The memory information of the node.
   *
   * @generated from field: payload.v1.Info.Memory memory = 5;
   */
  memory?: Info_Memory;

  /**
   * The pod information of the node.
   *
   * @generated from field: payload.v1.Info.Pods Pods = 6;
   */
  Pods?: Info_Pods;

  constructor(data?: PartialMessage<Info_Node>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Info.Node";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Info_Node;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Info_Node;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Info_Node;

  static equals(a: Info_Node | PlainMessage<Info_Node> | undefined, b: Info_Node | PlainMessage<Info_Node> | undefined): boolean;
}

/**
 * Represent the service information message.
 *
 * @generated from message payload.v1.Info.Service
 */
export declare class Info_Service extends Message<Info_Service> {
  /**
   * The name of the svc.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The cluster ip of the svc.
   *
   * @generated from field: string cluster_ip = 2;
   */
  clusterIp: string;

  /**
   * The cluster ips of the svc.
   *
   * @generated from field: repeated string cluster_ips = 3;
   */
  clusterIps: string[];

  /**
   * The port of the svc.
   *
   * @generated from field: repeated payload.v1.Info.ServicePort ports = 4;
   */
  ports: Info_ServicePort[];

  /**
   * The labels of the service.
   *
   * @generated from field: payload.v1.Info.Labels labels = 5;
   */
  labels?: Info_Labels;

  /**
   * The annotations of the service.
   *
   * @generated from field: payload.v1.Info.Annotations annotations = 6;
   */
  annotations?: Info_Annotations;

  constructor(data?: PartialMessage<Info_Service>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Info.Service";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Info_Service;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Info_Service;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Info_Service;

  static equals(a: Info_Service | PlainMessage<Info_Service> | undefined, b: Info_Service | PlainMessage<Info_Service> | undefined): boolean;
}

/**
 * Represets the service port information message.
 *
 * @generated from message payload.v1.Info.ServicePort
 */
export declare class Info_ServicePort extends Message<Info_ServicePort> {
  /**
   * The name of the port.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The port number
   *
   * @generated from field: int32 port = 2;
   */
  port: number;

  constructor(data?: PartialMessage<Info_ServicePort>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Info.ServicePort";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Info_ServicePort;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Info_ServicePort;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Info_ServicePort;

  static equals(a: Info_ServicePort | PlainMessage<Info_ServicePort> | undefined, b: Info_ServicePort | PlainMessage<Info_ServicePort> | undefined): boolean;
}

/**
 * Represent the kubernetes labels.
 *
 * @generated from message payload.v1.Info.Labels
 */
export declare class Info_Labels extends Message<Info_Labels> {
  /**
   * @generated from field: map<string, string> labels = 1;
   */
  labels: { [key: string]: string };

  constructor(data?: PartialMessage<Info_Labels>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Info.Labels";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Info_Labels;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Info_Labels;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Info_Labels;

  static equals(a: Info_Labels | PlainMessage<Info_Labels> | undefined, b: Info_Labels | PlainMessage<Info_Labels> | undefined): boolean;
}

/**
 * Represent the kubernetes annotations.
 *
 * @generated from message payload.v1.Info.Annotations
 */
export declare class Info_Annotations extends Message<Info_Annotations> {
  /**
   * @generated from field: map<string, string> annotations = 1;
   */
  annotations: { [key: string]: string };

  constructor(data?: PartialMessage<Info_Annotations>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Info.Annotations";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Info_Annotations;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Info_Annotations;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Info_Annotations;

  static equals(a: Info_Annotations | PlainMessage<Info_Annotations> | undefined, b: Info_Annotations | PlainMessage<Info_Annotations> | undefined): boolean;
}

/**
 * Represent the CPU information message.
 *
 * @generated from message payload.v1.Info.CPU
 */
export declare class Info_CPU extends Message<Info_CPU> {
  /**
   * The CPU resource limit.
   *
   * @generated from field: double limit = 1;
   */
  limit: number;

  /**
   * The CPU resource requested.
   *
   * @generated from field: double request = 2;
   */
  request: number;

  /**
   * The CPU usage.
   *
   * @generated from field: double usage = 3;
   */
  usage: number;

  constructor(data?: PartialMessage<Info_CPU>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Info.CPU";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Info_CPU;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Info_CPU;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Info_CPU;

  static equals(a: Info_CPU | PlainMessage<Info_CPU> | undefined, b: Info_CPU | PlainMessage<Info_CPU> | undefined): boolean;
}

/**
 * Represent the memory information message.
 *
 * @generated from message payload.v1.Info.Memory
 */
export declare class Info_Memory extends Message<Info_Memory> {
  /**
   * The memory limit.
   *
   * @generated from field: double limit = 1;
   */
  limit: number;

  /**
   * The memory requested.
   *
   * @generated from field: double request = 2;
   */
  request: number;

  /**
   * The memory usage.
   *
   * @generated from field: double usage = 3;
   */
  usage: number;

  constructor(data?: PartialMessage<Info_Memory>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Info.Memory";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Info_Memory;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Info_Memory;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Info_Memory;

  static equals(a: Info_Memory | PlainMessage<Info_Memory> | undefined, b: Info_Memory | PlainMessage<Info_Memory> | undefined): boolean;
}

/**
 * Represent the multiple pod information message.
 *
 * @generated from message payload.v1.Info.Pods
 */
export declare class Info_Pods extends Message<Info_Pods> {
  /**
   * The multiple pod information.
   *
   * @generated from field: repeated payload.v1.Info.Pod pods = 1;
   */
  pods: Info_Pod[];

  constructor(data?: PartialMessage<Info_Pods>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Info.Pods";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Info_Pods;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Info_Pods;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Info_Pods;

  static equals(a: Info_Pods | PlainMessage<Info_Pods> | undefined, b: Info_Pods | PlainMessage<Info_Pods> | undefined): boolean;
}

/**
 * Represent the multiple node information message.
 *
 * @generated from message payload.v1.Info.Nodes
 */
export declare class Info_Nodes extends Message<Info_Nodes> {
  /**
   * The multiple node information.
   *
   * @generated from field: repeated payload.v1.Info.Node nodes = 1;
   */
  nodes: Info_Node[];

  constructor(data?: PartialMessage<Info_Nodes>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Info.Nodes";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Info_Nodes;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Info_Nodes;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Info_Nodes;

  static equals(a: Info_Nodes | PlainMessage<Info_Nodes> | undefined, b: Info_Nodes | PlainMessage<Info_Nodes> | undefined): boolean;
}

/**
 * Represent the multiple service information message.
 *
 * @generated from message payload.v1.Info.Services
 */
export declare class Info_Services extends Message<Info_Services> {
  /**
   * The multiple service information.
   *
   * @generated from field: repeated payload.v1.Info.Service services = 1;
   */
  services: Info_Service[];

  constructor(data?: PartialMessage<Info_Services>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Info.Services";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Info_Services;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Info_Services;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Info_Services;

  static equals(a: Info_Services | PlainMessage<Info_Services> | undefined, b: Info_Services | PlainMessage<Info_Services> | undefined): boolean;
}

/**
 * Represent the multiple IP message.
 *
 * @generated from message payload.v1.Info.IPs
 */
export declare class Info_IPs extends Message<Info_IPs> {
  /**
   * @generated from field: repeated string ip = 1;
   */
  ip: string[];

  constructor(data?: PartialMessage<Info_IPs>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Info.IPs";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Info_IPs;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Info_IPs;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Info_IPs;

  static equals(a: Info_IPs | PlainMessage<Info_IPs> | undefined, b: Info_IPs | PlainMessage<Info_IPs> | undefined): boolean;
}

/**
 * Represent an empty message.
 *
 * @generated from message payload.v1.Empty
 */
export declare class Empty extends Message<Empty> {
  constructor(data?: PartialMessage<Empty>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "payload.v1.Empty";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Empty;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Empty;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Empty;

  static equals(a: Empty | PlainMessage<Empty> | undefined, b: Empty | PlainMessage<Empty> | undefined): boolean;
}

