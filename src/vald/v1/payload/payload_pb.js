//
// Copyright (C) 2019-2023 vdaas.org vald team <vald@vdaas.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-es v1.6.0 with parameter "target=js,js_import_style=legacy_commonjs,keep_empty_files=true"
// @generated from file vald/v1/payload/payload.proto (package payload.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

const { proto3 } = require("@bufbuild/protobuf");
const { Status } = require("../../../google/rpc/status_pb.js");

/**
 * Search related messages.
 *
 * @generated from message payload.v1.Search
 */
const Search = proto3.makeMessageType(
  "payload.v1.Search",
  [],
);

/**
 * AggregationAlgorithm is enum of each aggregation algorithms
 *
 * @generated from enum payload.v1.Search.AggregationAlgorithm
 */
const Search_AggregationAlgorithm = proto3.makeEnum(
  "payload.v1.Search.AggregationAlgorithm",
  [
    {no: 0, name: "Unknown"},
    {no: 1, name: "ConcurrentQueue"},
    {no: 2, name: "SortSlice"},
    {no: 3, name: "SortPoolSlice"},
    {no: 4, name: "PairingHeap"},
  ],
);

/**
 * Represent a search request.
 *
 * @generated from message payload.v1.Search.Request
 */
const Search_Request = proto3.makeMessageType(
  "payload.v1.Search.Request",
  () => [
    { no: 1, name: "vector", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
    { no: 2, name: "config", kind: "message", T: Search_Config },
  ],
  {localName: "Search_Request"},
);

/**
 * Represent the multiple search request.
 *
 * @generated from message payload.v1.Search.MultiRequest
 */
const Search_MultiRequest = proto3.makeMessageType(
  "payload.v1.Search.MultiRequest",
  () => [
    { no: 1, name: "requests", kind: "message", T: Search_Request, repeated: true },
  ],
  {localName: "Search_MultiRequest"},
);

/**
 * Represent a search by ID request.
 *
 * @generated from message payload.v1.Search.IDRequest
 */
const Search_IDRequest = proto3.makeMessageType(
  "payload.v1.Search.IDRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "config", kind: "message", T: Search_Config },
  ],
  {localName: "Search_IDRequest"},
);

/**
 * Represent the multiple search by ID request.
 *
 * @generated from message payload.v1.Search.MultiIDRequest
 */
const Search_MultiIDRequest = proto3.makeMessageType(
  "payload.v1.Search.MultiIDRequest",
  () => [
    { no: 1, name: "requests", kind: "message", T: Search_IDRequest, repeated: true },
  ],
  {localName: "Search_MultiIDRequest"},
);

/**
 * Represent a search by binary object request.
 *
 * @generated from message payload.v1.Search.ObjectRequest
 */
const Search_ObjectRequest = proto3.makeMessageType(
  "payload.v1.Search.ObjectRequest",
  () => [
    { no: 1, name: "object", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "config", kind: "message", T: Search_Config },
    { no: 3, name: "vectorizer", kind: "message", T: Filter_Target },
  ],
  {localName: "Search_ObjectRequest"},
);

/**
 * Represent the multiple search by binary object request.
 *
 * @generated from message payload.v1.Search.MultiObjectRequest
 */
const Search_MultiObjectRequest = proto3.makeMessageType(
  "payload.v1.Search.MultiObjectRequest",
  () => [
    { no: 1, name: "requests", kind: "message", T: Search_ObjectRequest, repeated: true },
  ],
  {localName: "Search_MultiObjectRequest"},
);

/**
 * Represent search configuration.
 *
 * @generated from message payload.v1.Search.Config
 */
const Search_Config = proto3.makeMessageType(
  "payload.v1.Search.Config",
  () => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "num", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "radius", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "epsilon", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "timeout", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "ingress_filters", kind: "message", T: Filter_Config },
    { no: 7, name: "egress_filters", kind: "message", T: Filter_Config },
    { no: 8, name: "min_num", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 9, name: "aggregation_algorithm", kind: "enum", T: proto3.getEnumType(Search_AggregationAlgorithm) },
  ],
  {localName: "Search_Config"},
);

/**
 * Represent a search response.
 *
 * @generated from message payload.v1.Search.Response
 */
const Search_Response = proto3.makeMessageType(
  "payload.v1.Search.Response",
  () => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "results", kind: "message", T: Object_Distance, repeated: true },
  ],
  {localName: "Search_Response"},
);

/**
 * Represent multiple search responses.
 *
 * @generated from message payload.v1.Search.Responses
 */
const Search_Responses = proto3.makeMessageType(
  "payload.v1.Search.Responses",
  () => [
    { no: 1, name: "responses", kind: "message", T: Search_Response, repeated: true },
  ],
  {localName: "Search_Responses"},
);

/**
 * Represent stream search response.
 *
 * @generated from message payload.v1.Search.StreamResponse
 */
const Search_StreamResponse = proto3.makeMessageType(
  "payload.v1.Search.StreamResponse",
  () => [
    { no: 1, name: "response", kind: "message", T: Search_Response, oneof: "payload" },
    { no: 2, name: "status", kind: "message", T: Status, oneof: "payload" },
  ],
  {localName: "Search_StreamResponse"},
);

/**
 * Filter related messages.
 *
 * @generated from message payload.v1.Filter
 */
const Filter = proto3.makeMessageType(
  "payload.v1.Filter",
  [],
);

/**
 * Represent the target filter server.
 *
 * @generated from message payload.v1.Filter.Target
 */
const Filter_Target = proto3.makeMessageType(
  "payload.v1.Filter.Target",
  () => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
  {localName: "Filter_Target"},
);

/**
 * Represent filter configuration.
 *
 * @generated from message payload.v1.Filter.Config
 */
const Filter_Config = proto3.makeMessageType(
  "payload.v1.Filter.Config",
  () => [
    { no: 1, name: "targets", kind: "message", T: Filter_Target, repeated: true },
  ],
  {localName: "Filter_Config"},
);

/**
 * Insert related messages.
 *
 * @generated from message payload.v1.Insert
 */
const Insert = proto3.makeMessageType(
  "payload.v1.Insert",
  [],
);

/**
 * Represent the insert request.
 *
 * @generated from message payload.v1.Insert.Request
 */
const Insert_Request = proto3.makeMessageType(
  "payload.v1.Insert.Request",
  () => [
    { no: 1, name: "vector", kind: "message", T: Object_Vector },
    { no: 2, name: "config", kind: "message", T: Insert_Config },
  ],
  {localName: "Insert_Request"},
);

/**
 * Represent the multiple insert request.
 *
 * @generated from message payload.v1.Insert.MultiRequest
 */
const Insert_MultiRequest = proto3.makeMessageType(
  "payload.v1.Insert.MultiRequest",
  () => [
    { no: 1, name: "requests", kind: "message", T: Insert_Request, repeated: true },
  ],
  {localName: "Insert_MultiRequest"},
);

/**
 * Represent the insert by binary object request.
 *
 * @generated from message payload.v1.Insert.ObjectRequest
 */
const Insert_ObjectRequest = proto3.makeMessageType(
  "payload.v1.Insert.ObjectRequest",
  () => [
    { no: 1, name: "object", kind: "message", T: Object_Blob },
    { no: 2, name: "config", kind: "message", T: Insert_Config },
    { no: 3, name: "vectorizer", kind: "message", T: Filter_Target },
  ],
  {localName: "Insert_ObjectRequest"},
);

/**
 * Represent the multiple insert by binary object request.
 *
 * @generated from message payload.v1.Insert.MultiObjectRequest
 */
const Insert_MultiObjectRequest = proto3.makeMessageType(
  "payload.v1.Insert.MultiObjectRequest",
  () => [
    { no: 1, name: "requests", kind: "message", T: Insert_ObjectRequest, repeated: true },
  ],
  {localName: "Insert_MultiObjectRequest"},
);

/**
 * Represent insert configurations.
 *
 * @generated from message payload.v1.Insert.Config
 */
const Insert_Config = proto3.makeMessageType(
  "payload.v1.Insert.Config",
  () => [
    { no: 1, name: "skip_strict_exist_check", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "filters", kind: "message", T: Filter_Config },
    { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
  {localName: "Insert_Config"},
);

/**
 * Update related messages
 *
 * @generated from message payload.v1.Update
 */
const Update = proto3.makeMessageType(
  "payload.v1.Update",
  [],
);

/**
 * Represent the update request.
 *
 * @generated from message payload.v1.Update.Request
 */
const Update_Request = proto3.makeMessageType(
  "payload.v1.Update.Request",
  () => [
    { no: 1, name: "vector", kind: "message", T: Object_Vector },
    { no: 2, name: "config", kind: "message", T: Update_Config },
  ],
  {localName: "Update_Request"},
);

/**
 * Represent the multiple update request.
 *
 * @generated from message payload.v1.Update.MultiRequest
 */
const Update_MultiRequest = proto3.makeMessageType(
  "payload.v1.Update.MultiRequest",
  () => [
    { no: 1, name: "requests", kind: "message", T: Update_Request, repeated: true },
  ],
  {localName: "Update_MultiRequest"},
);

/**
 * Represent the update binary object request.
 *
 * @generated from message payload.v1.Update.ObjectRequest
 */
const Update_ObjectRequest = proto3.makeMessageType(
  "payload.v1.Update.ObjectRequest",
  () => [
    { no: 1, name: "object", kind: "message", T: Object_Blob },
    { no: 2, name: "config", kind: "message", T: Update_Config },
    { no: 3, name: "vectorizer", kind: "message", T: Filter_Target },
  ],
  {localName: "Update_ObjectRequest"},
);

/**
 * Represent the multiple update binary object request.
 *
 * @generated from message payload.v1.Update.MultiObjectRequest
 */
const Update_MultiObjectRequest = proto3.makeMessageType(
  "payload.v1.Update.MultiObjectRequest",
  () => [
    { no: 1, name: "requests", kind: "message", T: Update_ObjectRequest, repeated: true },
  ],
  {localName: "Update_MultiObjectRequest"},
);

/**
 * Represent the update configuration.
 *
 * @generated from message payload.v1.Update.Config
 */
const Update_Config = proto3.makeMessageType(
  "payload.v1.Update.Config",
  () => [
    { no: 1, name: "skip_strict_exist_check", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "filters", kind: "message", T: Filter_Config },
    { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "disable_balanced_update", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
  {localName: "Update_Config"},
);

/**
 * Upsert related messages.
 *
 * @generated from message payload.v1.Upsert
 */
const Upsert = proto3.makeMessageType(
  "payload.v1.Upsert",
  [],
);

/**
 * Represent the upsert request.
 *
 * @generated from message payload.v1.Upsert.Request
 */
const Upsert_Request = proto3.makeMessageType(
  "payload.v1.Upsert.Request",
  () => [
    { no: 1, name: "vector", kind: "message", T: Object_Vector },
    { no: 2, name: "config", kind: "message", T: Upsert_Config },
  ],
  {localName: "Upsert_Request"},
);

/**
 * Represent mthe ultiple upsert request.
 *
 * @generated from message payload.v1.Upsert.MultiRequest
 */
const Upsert_MultiRequest = proto3.makeMessageType(
  "payload.v1.Upsert.MultiRequest",
  () => [
    { no: 1, name: "requests", kind: "message", T: Upsert_Request, repeated: true },
  ],
  {localName: "Upsert_MultiRequest"},
);

/**
 * Represent the upsert binary object request.
 *
 * @generated from message payload.v1.Upsert.ObjectRequest
 */
const Upsert_ObjectRequest = proto3.makeMessageType(
  "payload.v1.Upsert.ObjectRequest",
  () => [
    { no: 1, name: "object", kind: "message", T: Object_Blob },
    { no: 2, name: "config", kind: "message", T: Upsert_Config },
    { no: 3, name: "vectorizer", kind: "message", T: Filter_Target },
  ],
  {localName: "Upsert_ObjectRequest"},
);

/**
 * Represent the multiple upsert binary object request.
 *
 * @generated from message payload.v1.Upsert.MultiObjectRequest
 */
const Upsert_MultiObjectRequest = proto3.makeMessageType(
  "payload.v1.Upsert.MultiObjectRequest",
  () => [
    { no: 1, name: "requests", kind: "message", T: Upsert_ObjectRequest, repeated: true },
  ],
  {localName: "Upsert_MultiObjectRequest"},
);

/**
 * Represent the upsert configuration.
 *
 * @generated from message payload.v1.Upsert.Config
 */
const Upsert_Config = proto3.makeMessageType(
  "payload.v1.Upsert.Config",
  () => [
    { no: 1, name: "skip_strict_exist_check", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "filters", kind: "message", T: Filter_Config },
    { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "disable_balanced_update", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
  {localName: "Upsert_Config"},
);

/**
 * Remove related messages.
 *
 * @generated from message payload.v1.Remove
 */
const Remove = proto3.makeMessageType(
  "payload.v1.Remove",
  [],
);

/**
 * Represent the remove request.
 *
 * @generated from message payload.v1.Remove.Request
 */
const Remove_Request = proto3.makeMessageType(
  "payload.v1.Remove.Request",
  () => [
    { no: 1, name: "id", kind: "message", T: Object_ID },
    { no: 2, name: "config", kind: "message", T: Remove_Config },
  ],
  {localName: "Remove_Request"},
);

/**
 * Represent the multiple remove request.
 *
 * @generated from message payload.v1.Remove.MultiRequest
 */
const Remove_MultiRequest = proto3.makeMessageType(
  "payload.v1.Remove.MultiRequest",
  () => [
    { no: 1, name: "requests", kind: "message", T: Remove_Request, repeated: true },
  ],
  {localName: "Remove_MultiRequest"},
);

/**
 * Represent the remove request based on timestamp.
 *
 * @generated from message payload.v1.Remove.TimestampRequest
 */
const Remove_TimestampRequest = proto3.makeMessageType(
  "payload.v1.Remove.TimestampRequest",
  () => [
    { no: 1, name: "timestamps", kind: "message", T: Remove_Timestamp, repeated: true },
  ],
  {localName: "Remove_TimestampRequest"},
);

/**
 * Represent the timestamp comparison.
 *
 * @generated from message payload.v1.Remove.Timestamp
 */
const Remove_Timestamp = proto3.makeMessageType(
  "payload.v1.Remove.Timestamp",
  () => [
    { no: 1, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "operator", kind: "enum", T: proto3.getEnumType(Remove_Timestamp_Operator) },
  ],
  {localName: "Remove_Timestamp"},
);

/**
 * Operator is enum of each conditional operator.
 *
 * @generated from enum payload.v1.Remove.Timestamp.Operator
 */
const Remove_Timestamp_Operator = proto3.makeEnum(
  "payload.v1.Remove.Timestamp.Operator",
  [
    {no: 0, name: "Eq"},
    {no: 1, name: "Ne"},
    {no: 2, name: "Ge"},
    {no: 3, name: "Gt"},
    {no: 4, name: "Le"},
    {no: 5, name: "Lt"},
  ],
);

/**
 * Represent the remove configuration.
 *
 * @generated from message payload.v1.Remove.Config
 */
const Remove_Config = proto3.makeMessageType(
  "payload.v1.Remove.Config",
  () => [
    { no: 1, name: "skip_strict_exist_check", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
  {localName: "Remove_Config"},
);

/**
 * Common messages.
 *
 * @generated from message payload.v1.Object
 */
const Object$ = proto3.makeMessageType(
  "payload.v1.Object",
  [],
  {localName: "Object$"},
);

/**
 * Represent a request to fetch raw vector.
 *
 * @generated from message payload.v1.Object.VectorRequest
 */
const Object_VectorRequest = proto3.makeMessageType(
  "payload.v1.Object.VectorRequest",
  () => [
    { no: 1, name: "id", kind: "message", T: Object_ID },
    { no: 2, name: "filters", kind: "message", T: Filter_Config },
  ],
  {localName: "Object_VectorRequest"},
);

/**
 * Represent the ID and distance pair.
 *
 * @generated from message payload.v1.Object.Distance
 */
const Object_Distance = proto3.makeMessageType(
  "payload.v1.Object.Distance",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "distance", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ],
  {localName: "Object_Distance"},
);

/**
 * Represent stream response of distances.
 *
 * @generated from message payload.v1.Object.StreamDistance
 */
const Object_StreamDistance = proto3.makeMessageType(
  "payload.v1.Object.StreamDistance",
  () => [
    { no: 1, name: "distance", kind: "message", T: Object_Distance, oneof: "payload" },
    { no: 2, name: "status", kind: "message", T: Status, oneof: "payload" },
  ],
  {localName: "Object_StreamDistance"},
);

/**
 * Represent the vector ID.
 *
 * @generated from message payload.v1.Object.ID
 */
const Object_ID = proto3.makeMessageType(
  "payload.v1.Object.ID",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "Object_ID"},
);

/**
 * Represent multiple vector IDs.
 *
 * @generated from message payload.v1.Object.IDs
 */
const Object_IDs = proto3.makeMessageType(
  "payload.v1.Object.IDs",
  () => [
    { no: 1, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
  {localName: "Object_IDs"},
);

/**
 * Represent a vector.
 *
 * @generated from message payload.v1.Object.Vector
 */
const Object_Vector = proto3.makeMessageType(
  "payload.v1.Object.Vector",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vector", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
    { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
  {localName: "Object_Vector"},
);

/**
 * Represent a request to fetch vector meta data.
 *
 * @generated from message payload.v1.Object.GetTimestampRequest
 */
const Object_GetTimestampRequest = proto3.makeMessageType(
  "payload.v1.Object.GetTimestampRequest",
  () => [
    { no: 1, name: "id", kind: "message", T: Object_ID },
  ],
  {localName: "Object_GetTimestampRequest"},
);

/**
 * Represent a vector meta data.
 *
 * @generated from message payload.v1.Object.Timestamp
 */
const Object_Timestamp = proto3.makeMessageType(
  "payload.v1.Object.Timestamp",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
  {localName: "Object_Timestamp"},
);

/**
 * Represent multiple vectors.
 *
 * @generated from message payload.v1.Object.Vectors
 */
const Object_Vectors = proto3.makeMessageType(
  "payload.v1.Object.Vectors",
  () => [
    { no: 1, name: "vectors", kind: "message", T: Object_Vector, repeated: true },
  ],
  {localName: "Object_Vectors"},
);

/**
 * Represent stream response of the vector.
 *
 * @generated from message payload.v1.Object.StreamVector
 */
const Object_StreamVector = proto3.makeMessageType(
  "payload.v1.Object.StreamVector",
  () => [
    { no: 1, name: "vector", kind: "message", T: Object_Vector, oneof: "payload" },
    { no: 2, name: "status", kind: "message", T: Status, oneof: "payload" },
  ],
  {localName: "Object_StreamVector"},
);

/**
 * Represent reshape vector.
 *
 * @generated from message payload.v1.Object.ReshapeVector
 */
const Object_ReshapeVector = proto3.makeMessageType(
  "payload.v1.Object.ReshapeVector",
  () => [
    { no: 1, name: "object", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "shape", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ],
  {localName: "Object_ReshapeVector"},
);

/**
 * Represent the binary object.
 *
 * @generated from message payload.v1.Object.Blob
 */
const Object_Blob = proto3.makeMessageType(
  "payload.v1.Object.Blob",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
  {localName: "Object_Blob"},
);

/**
 * Represent stream response of binary objects.
 *
 * @generated from message payload.v1.Object.StreamBlob
 */
const Object_StreamBlob = proto3.makeMessageType(
  "payload.v1.Object.StreamBlob",
  () => [
    { no: 1, name: "blob", kind: "message", T: Object_Blob, oneof: "payload" },
    { no: 2, name: "status", kind: "message", T: Status, oneof: "payload" },
  ],
  {localName: "Object_StreamBlob"},
);

/**
 * Represent the vector location.
 *
 * @generated from message payload.v1.Object.Location
 */
const Object_Location = proto3.makeMessageType(
  "payload.v1.Object.Location",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ips", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
  {localName: "Object_Location"},
);

/**
 * Represent the stream response of the vector location.
 *
 * @generated from message payload.v1.Object.StreamLocation
 */
const Object_StreamLocation = proto3.makeMessageType(
  "payload.v1.Object.StreamLocation",
  () => [
    { no: 1, name: "location", kind: "message", T: Object_Location, oneof: "payload" },
    { no: 2, name: "status", kind: "message", T: Status, oneof: "payload" },
  ],
  {localName: "Object_StreamLocation"},
);

/**
 * Represent multiple vector locations.
 *
 * @generated from message payload.v1.Object.Locations
 */
const Object_Locations = proto3.makeMessageType(
  "payload.v1.Object.Locations",
  () => [
    { no: 1, name: "locations", kind: "message", T: Object_Location, repeated: true },
  ],
  {localName: "Object_Locations"},
);

/**
 * Represent the list object vector stream request and response.
 *
 * @generated from message payload.v1.Object.List
 */
const Object_List = proto3.makeMessageType(
  "payload.v1.Object.List",
  [],
  {localName: "Object_List"},
);

/**
 * @generated from message payload.v1.Object.List.Request
 */
const Object_List_Request = proto3.makeMessageType(
  "payload.v1.Object.List.Request",
  [],
  {localName: "Object_List_Request"},
);

/**
 * @generated from message payload.v1.Object.List.Response
 */
const Object_List_Response = proto3.makeMessageType(
  "payload.v1.Object.List.Response",
  () => [
    { no: 1, name: "vector", kind: "message", T: Object_Vector, oneof: "payload" },
    { no: 2, name: "status", kind: "message", T: Status, oneof: "payload" },
  ],
  {localName: "Object_List_Response"},
);

/**
 * Control related messages.
 *
 * @generated from message payload.v1.Control
 */
const Control = proto3.makeMessageType(
  "payload.v1.Control",
  [],
);

/**
 * Represent the create index request.
 *
 * @generated from message payload.v1.Control.CreateIndexRequest
 */
const Control_CreateIndexRequest = proto3.makeMessageType(
  "payload.v1.Control.CreateIndexRequest",
  () => [
    { no: 1, name: "pool_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
  {localName: "Control_CreateIndexRequest"},
);

/**
 * Discoverer related messages.
 *
 * @generated from message payload.v1.Discoverer
 */
const Discoverer = proto3.makeMessageType(
  "payload.v1.Discoverer",
  [],
);

/**
 * Represent the dicoverer request.
 *
 * @generated from message payload.v1.Discoverer.Request
 */
const Discoverer_Request = proto3.makeMessageType(
  "payload.v1.Discoverer.Request",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "node", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "Discoverer_Request"},
);

/**
 * Info related messages.
 *
 * @generated from message payload.v1.Info
 */
const Info = proto3.makeMessageType(
  "payload.v1.Info",
  [],
);

/**
 * Represent the index information messages.
 *
 * @generated from message payload.v1.Info.Index
 */
const Info_Index = proto3.makeMessageType(
  "payload.v1.Info.Index",
  [],
  {localName: "Info_Index"},
);

/**
 * Represent the index count message.
 *
 * @generated from message payload.v1.Info.Index.Count
 */
const Info_Index_Count = proto3.makeMessageType(
  "payload.v1.Info.Index.Count",
  () => [
    { no: 1, name: "stored", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "uncommitted", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "indexing", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "saving", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
  {localName: "Info_Index_Count"},
);

/**
 * Represent the UUID message.
 *
 * @generated from message payload.v1.Info.Index.UUID
 */
const Info_Index_UUID = proto3.makeMessageType(
  "payload.v1.Info.Index.UUID",
  [],
  {localName: "Info_Index_UUID"},
);

/**
 * The committed UUID.
 *
 * @generated from message payload.v1.Info.Index.UUID.Committed
 */
const Info_Index_UUID_Committed = proto3.makeMessageType(
  "payload.v1.Info.Index.UUID.Committed",
  () => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "Info_Index_UUID_Committed"},
);

/**
 * The uncommitted UUID.
 *
 * @generated from message payload.v1.Info.Index.UUID.Uncommitted
 */
const Info_Index_UUID_Uncommitted = proto3.makeMessageType(
  "payload.v1.Info.Index.UUID.Uncommitted",
  () => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "Info_Index_UUID_Uncommitted"},
);

/**
 * Represent the pod information message.
 *
 * @generated from message payload.v1.Info.Pod
 */
const Info_Pod = proto3.makeMessageType(
  "payload.v1.Info.Pod",
  () => [
    { no: 1, name: "app_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "cpu", kind: "message", T: Info_CPU },
    { no: 6, name: "memory", kind: "message", T: Info_Memory },
    { no: 7, name: "node", kind: "message", T: Info_Node },
  ],
  {localName: "Info_Pod"},
);

/**
 * Represent the node information message.
 *
 * @generated from message payload.v1.Info.Node
 */
const Info_Node = proto3.makeMessageType(
  "payload.v1.Info.Node",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "internal_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "external_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "cpu", kind: "message", T: Info_CPU },
    { no: 5, name: "memory", kind: "message", T: Info_Memory },
    { no: 6, name: "Pods", kind: "message", T: Info_Pods },
  ],
  {localName: "Info_Node"},
);

/**
 * Represent the service information message.
 *
 * @generated from message payload.v1.Info.Service
 */
const Info_Service = proto3.makeMessageType(
  "payload.v1.Info.Service",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cluster_ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cluster_ips", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "ports", kind: "message", T: Info_ServicePort, repeated: true },
    { no: 5, name: "labels", kind: "message", T: Info_Labels },
    { no: 6, name: "annotations", kind: "message", T: Info_Annotations },
  ],
  {localName: "Info_Service"},
);

/**
 * Represets the service port information message.
 *
 * @generated from message payload.v1.Info.ServicePort
 */
const Info_ServicePort = proto3.makeMessageType(
  "payload.v1.Info.ServicePort",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
  {localName: "Info_ServicePort"},
);

/**
 * Represent the kubernetes labels.
 *
 * @generated from message payload.v1.Info.Labels
 */
const Info_Labels = proto3.makeMessageType(
  "payload.v1.Info.Labels",
  () => [
    { no: 1, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ],
  {localName: "Info_Labels"},
);

/**
 * Represent the kubernetes annotations.
 *
 * @generated from message payload.v1.Info.Annotations
 */
const Info_Annotations = proto3.makeMessageType(
  "payload.v1.Info.Annotations",
  () => [
    { no: 1, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ],
  {localName: "Info_Annotations"},
);

/**
 * Represent the CPU information message.
 *
 * @generated from message payload.v1.Info.CPU
 */
const Info_CPU = proto3.makeMessageType(
  "payload.v1.Info.CPU",
  () => [
    { no: 1, name: "limit", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "request", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "usage", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ],
  {localName: "Info_CPU"},
);

/**
 * Represent the memory information message.
 *
 * @generated from message payload.v1.Info.Memory
 */
const Info_Memory = proto3.makeMessageType(
  "payload.v1.Info.Memory",
  () => [
    { no: 1, name: "limit", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "request", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "usage", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ],
  {localName: "Info_Memory"},
);

/**
 * Represent the multiple pod information message.
 *
 * @generated from message payload.v1.Info.Pods
 */
const Info_Pods = proto3.makeMessageType(
  "payload.v1.Info.Pods",
  () => [
    { no: 1, name: "pods", kind: "message", T: Info_Pod, repeated: true },
  ],
  {localName: "Info_Pods"},
);

/**
 * Represent the multiple node information message.
 *
 * @generated from message payload.v1.Info.Nodes
 */
const Info_Nodes = proto3.makeMessageType(
  "payload.v1.Info.Nodes",
  () => [
    { no: 1, name: "nodes", kind: "message", T: Info_Node, repeated: true },
  ],
  {localName: "Info_Nodes"},
);

/**
 * Represent the multiple service information message.
 *
 * @generated from message payload.v1.Info.Services
 */
const Info_Services = proto3.makeMessageType(
  "payload.v1.Info.Services",
  () => [
    { no: 1, name: "services", kind: "message", T: Info_Service, repeated: true },
  ],
  {localName: "Info_Services"},
);

/**
 * Represent the multiple IP message.
 *
 * @generated from message payload.v1.Info.IPs
 */
const Info_IPs = proto3.makeMessageType(
  "payload.v1.Info.IPs",
  () => [
    { no: 1, name: "ip", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
  {localName: "Info_IPs"},
);

/**
 * Represent an empty message.
 *
 * @generated from message payload.v1.Empty
 */
const Empty = proto3.makeMessageType(
  "payload.v1.Empty",
  [],
);


exports.Search = Search;
exports.Search_AggregationAlgorithm = Search_AggregationAlgorithm;
exports.Search_Request = Search_Request;
exports.Search_MultiRequest = Search_MultiRequest;
exports.Search_IDRequest = Search_IDRequest;
exports.Search_MultiIDRequest = Search_MultiIDRequest;
exports.Search_ObjectRequest = Search_ObjectRequest;
exports.Search_MultiObjectRequest = Search_MultiObjectRequest;
exports.Search_Config = Search_Config;
exports.Search_Response = Search_Response;
exports.Search_Responses = Search_Responses;
exports.Search_StreamResponse = Search_StreamResponse;
exports.Filter = Filter;
exports.Filter_Target = Filter_Target;
exports.Filter_Config = Filter_Config;
exports.Insert = Insert;
exports.Insert_Request = Insert_Request;
exports.Insert_MultiRequest = Insert_MultiRequest;
exports.Insert_ObjectRequest = Insert_ObjectRequest;
exports.Insert_MultiObjectRequest = Insert_MultiObjectRequest;
exports.Insert_Config = Insert_Config;
exports.Update = Update;
exports.Update_Request = Update_Request;
exports.Update_MultiRequest = Update_MultiRequest;
exports.Update_ObjectRequest = Update_ObjectRequest;
exports.Update_MultiObjectRequest = Update_MultiObjectRequest;
exports.Update_Config = Update_Config;
exports.Upsert = Upsert;
exports.Upsert_Request = Upsert_Request;
exports.Upsert_MultiRequest = Upsert_MultiRequest;
exports.Upsert_ObjectRequest = Upsert_ObjectRequest;
exports.Upsert_MultiObjectRequest = Upsert_MultiObjectRequest;
exports.Upsert_Config = Upsert_Config;
exports.Remove = Remove;
exports.Remove_Request = Remove_Request;
exports.Remove_MultiRequest = Remove_MultiRequest;
exports.Remove_TimestampRequest = Remove_TimestampRequest;
exports.Remove_Timestamp = Remove_Timestamp;
exports.Remove_Timestamp_Operator = Remove_Timestamp_Operator;
exports.Remove_Config = Remove_Config;
exports.Object$ = Object$;
exports.Object_VectorRequest = Object_VectorRequest;
exports.Object_Distance = Object_Distance;
exports.Object_StreamDistance = Object_StreamDistance;
exports.Object_ID = Object_ID;
exports.Object_IDs = Object_IDs;
exports.Object_Vector = Object_Vector;
exports.Object_GetTimestampRequest = Object_GetTimestampRequest;
exports.Object_Timestamp = Object_Timestamp;
exports.Object_Vectors = Object_Vectors;
exports.Object_StreamVector = Object_StreamVector;
exports.Object_ReshapeVector = Object_ReshapeVector;
exports.Object_Blob = Object_Blob;
exports.Object_StreamBlob = Object_StreamBlob;
exports.Object_Location = Object_Location;
exports.Object_StreamLocation = Object_StreamLocation;
exports.Object_Locations = Object_Locations;
exports.Object_List = Object_List;
exports.Object_List_Request = Object_List_Request;
exports.Object_List_Response = Object_List_Response;
exports.Control = Control;
exports.Control_CreateIndexRequest = Control_CreateIndexRequest;
exports.Discoverer = Discoverer;
exports.Discoverer_Request = Discoverer_Request;
exports.Info = Info;
exports.Info_Index = Info_Index;
exports.Info_Index_Count = Info_Index_Count;
exports.Info_Index_UUID = Info_Index_UUID;
exports.Info_Index_UUID_Committed = Info_Index_UUID_Committed;
exports.Info_Index_UUID_Uncommitted = Info_Index_UUID_Uncommitted;
exports.Info_Pod = Info_Pod;
exports.Info_Node = Info_Node;
exports.Info_Service = Info_Service;
exports.Info_ServicePort = Info_ServicePort;
exports.Info_Labels = Info_Labels;
exports.Info_Annotations = Info_Annotations;
exports.Info_CPU = Info_CPU;
exports.Info_Memory = Info_Memory;
exports.Info_Pods = Info_Pods;
exports.Info_Nodes = Info_Nodes;
exports.Info_Services = Info_Services;
exports.Info_IPs = Info_IPs;
exports.Empty = Empty;
