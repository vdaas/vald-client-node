// @generated by protobuf-ts 2.9.3 with parameter add_pb_suffix,client_grpc1,generate_dependencies,keep_enum_prefix,ts_nocheck,use_proto_field_name
// @generated from protobuf file "vald/v1/agent/core/agent.proto" (package "core.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
//
// Copyright (C) 2019-2023 vdaas.org vald team <vald@vdaas.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
import { Agent } from "./agent_pb";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { Object_Timestamp } from "../../payload/payload_pb";
import type { Object_GetTimestampRequest } from "../../payload/payload_pb";
import type { Info_Index_Count } from "../../payload/payload_pb";
import type { Empty } from "../../payload/payload_pb";
import type { Control_CreateIndexRequest } from "../../payload/payload_pb";
import * as grpc from "@grpc/grpc-js";
/**
 * Represent the agent service.
 *
 * @generated from protobuf service core.v1.Agent
 */
export interface IAgentClient {
    /**
     * Represent the creating index RPC.
     *
     * @generated from protobuf rpc: CreateIndex(payload.v1.Control.CreateIndexRequest) returns (payload.v1.Empty);
     */
    createIndex(input: Control_CreateIndexRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    createIndex(input: Control_CreateIndexRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    createIndex(input: Control_CreateIndexRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    createIndex(input: Control_CreateIndexRequest, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    /**
     * Represent the saving index RPC.
     *
     * @generated from protobuf rpc: SaveIndex(payload.v1.Empty) returns (payload.v1.Empty);
     */
    saveIndex(input: Empty, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    saveIndex(input: Empty, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    saveIndex(input: Empty, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    saveIndex(input: Empty, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    /**
     * Represent the creating and saving index RPC.
     *
     * @generated from protobuf rpc: CreateAndSaveIndex(payload.v1.Control.CreateIndexRequest) returns (payload.v1.Empty);
     */
    createAndSaveIndex(input: Control_CreateIndexRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    createAndSaveIndex(input: Control_CreateIndexRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    createAndSaveIndex(input: Control_CreateIndexRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    createAndSaveIndex(input: Control_CreateIndexRequest, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    /**
     * Represent the RPC to get the agent index information.
     *
     * @generated from protobuf rpc: IndexInfo(payload.v1.Empty) returns (payload.v1.Info.Index.Count);
     */
    indexInfo(input: Empty, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Info_Index_Count) => void): grpc.ClientUnaryCall;
    indexInfo(input: Empty, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Info_Index_Count) => void): grpc.ClientUnaryCall;
    indexInfo(input: Empty, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Info_Index_Count) => void): grpc.ClientUnaryCall;
    indexInfo(input: Empty, callback: (err: grpc.ServiceError | null, value?: Info_Index_Count) => void): grpc.ClientUnaryCall;
    /**
     * Represent the RPC to get the vector metadata. This RPC is mainly used for index correction process
     *
     * @generated from protobuf rpc: GetTimestamp(payload.v1.Object.GetTimestampRequest) returns (payload.v1.Object.Timestamp);
     */
    getTimestamp(input: Object_GetTimestampRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Object_Timestamp) => void): grpc.ClientUnaryCall;
    getTimestamp(input: Object_GetTimestampRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Object_Timestamp) => void): grpc.ClientUnaryCall;
    getTimestamp(input: Object_GetTimestampRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Object_Timestamp) => void): grpc.ClientUnaryCall;
    getTimestamp(input: Object_GetTimestampRequest, callback: (err: grpc.ServiceError | null, value?: Object_Timestamp) => void): grpc.ClientUnaryCall;
}
/**
 * Represent the agent service.
 *
 * @generated from protobuf service core.v1.Agent
 */
export class AgentClient extends grpc.Client implements IAgentClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * Represent the creating index RPC.
     *
     * @generated from protobuf rpc: CreateIndex(payload.v1.Control.CreateIndexRequest) returns (payload.v1.Empty);
     */
    createIndex(input: Control_CreateIndexRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Empty) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Empty) => void), callback?: ((err: grpc.ServiceError | null, value?: Empty) => void)): grpc.ClientUnaryCall {
        const method = Agent.methods[0];
        return this.makeUnaryRequest<Control_CreateIndexRequest, Empty>(`/${Agent.typeName}/${method.name}`, (value: Control_CreateIndexRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): Empty => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * Represent the saving index RPC.
     *
     * @generated from protobuf rpc: SaveIndex(payload.v1.Empty) returns (payload.v1.Empty);
     */
    saveIndex(input: Empty, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Empty) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Empty) => void), callback?: ((err: grpc.ServiceError | null, value?: Empty) => void)): grpc.ClientUnaryCall {
        const method = Agent.methods[1];
        return this.makeUnaryRequest<Empty, Empty>(`/${Agent.typeName}/${method.name}`, (value: Empty): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): Empty => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * Represent the creating and saving index RPC.
     *
     * @generated from protobuf rpc: CreateAndSaveIndex(payload.v1.Control.CreateIndexRequest) returns (payload.v1.Empty);
     */
    createAndSaveIndex(input: Control_CreateIndexRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Empty) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Empty) => void), callback?: ((err: grpc.ServiceError | null, value?: Empty) => void)): grpc.ClientUnaryCall {
        const method = Agent.methods[2];
        return this.makeUnaryRequest<Control_CreateIndexRequest, Empty>(`/${Agent.typeName}/${method.name}`, (value: Control_CreateIndexRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): Empty => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * Represent the RPC to get the agent index information.
     *
     * @generated from protobuf rpc: IndexInfo(payload.v1.Empty) returns (payload.v1.Info.Index.Count);
     */
    indexInfo(input: Empty, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Info_Index_Count) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Info_Index_Count) => void), callback?: ((err: grpc.ServiceError | null, value?: Info_Index_Count) => void)): grpc.ClientUnaryCall {
        const method = Agent.methods[3];
        return this.makeUnaryRequest<Empty, Info_Index_Count>(`/${Agent.typeName}/${method.name}`, (value: Empty): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): Info_Index_Count => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * Represent the RPC to get the vector metadata. This RPC is mainly used for index correction process
     *
     * @generated from protobuf rpc: GetTimestamp(payload.v1.Object.GetTimestampRequest) returns (payload.v1.Object.Timestamp);
     */
    getTimestamp(input: Object_GetTimestampRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Object_Timestamp) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Object_Timestamp) => void), callback?: ((err: grpc.ServiceError | null, value?: Object_Timestamp) => void)): grpc.ClientUnaryCall {
        const method = Agent.methods[4];
        return this.makeUnaryRequest<Object_GetTimestampRequest, Object_Timestamp>(`/${Agent.typeName}/${method.name}`, (value: Object_GetTimestampRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): Object_Timestamp => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
}
