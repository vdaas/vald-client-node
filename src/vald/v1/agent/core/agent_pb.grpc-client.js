/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter add_pb_suffix,client_grpc1,generate_dependencies,keep_enum_prefix,ts_nocheck,use_proto_field_name,output_javascript,output_legacy_commonjs,eslint_disable
// @generated from protobuf file "vald/v1/agent/core/agent.proto" (package "core.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
//
// Copyright (C) 2019-2024 vdaas.org vald team <vald@vdaas.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentClient = void 0;
/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter add_pb_suffix,client_grpc1,generate_dependencies,keep_enum_prefix,ts_nocheck,use_proto_field_name,output_javascript,output_legacy_commonjs,eslint_disable
// @generated from protobuf file "vald/v1/agent/core/agent.proto" (package "core.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
//
// Copyright (C) 2019-2024 vdaas.org vald team <vald@vdaas.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
const agent_pb_1 = require("./agent_pb");
const grpc = require("@grpc/grpc-js");
/**
 * Represent the agent service.
 *
 * @generated from protobuf service core.v1.Agent
 */
class AgentClient extends grpc.Client {
    constructor(address, credentials, options = {}, binaryOptions = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * Represent the creating index RPC.
     *
     * @generated from protobuf rpc: CreateIndex(payload.v1.Control.CreateIndexRequest) returns (payload.v1.Empty);
     */
    createIndex(input, metadata, options, callback) {
        const method = agent_pb_1.Agent.methods[0];
        return this.makeUnaryRequest(`/${agent_pb_1.Agent.typeName}/${method.name}`, (value) => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value) => method.O.fromBinary(value, this._binaryOptions), input, metadata, options, callback);
    }
    /**
     * Represent the saving index RPC.
     *
     * @generated from protobuf rpc: SaveIndex(payload.v1.Empty) returns (payload.v1.Empty);
     */
    saveIndex(input, metadata, options, callback) {
        const method = agent_pb_1.Agent.methods[1];
        return this.makeUnaryRequest(`/${agent_pb_1.Agent.typeName}/${method.name}`, (value) => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value) => method.O.fromBinary(value, this._binaryOptions), input, metadata, options, callback);
    }
    /**
     * Represent the creating and saving index RPC.
     *
     * @generated from protobuf rpc: CreateAndSaveIndex(payload.v1.Control.CreateIndexRequest) returns (payload.v1.Empty);
     */
    createAndSaveIndex(input, metadata, options, callback) {
        const method = agent_pb_1.Agent.methods[2];
        return this.makeUnaryRequest(`/${agent_pb_1.Agent.typeName}/${method.name}`, (value) => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value) => method.O.fromBinary(value, this._binaryOptions), input, metadata, options, callback);
    }
    /**
     * Represent the RPC to get the agent index information.
     *
     * @generated from protobuf rpc: IndexInfo(payload.v1.Empty) returns (payload.v1.Info.Index.Count);
     */
    indexInfo(input, metadata, options, callback) {
        const method = agent_pb_1.Agent.methods[3];
        return this.makeUnaryRequest(`/${agent_pb_1.Agent.typeName}/${method.name}`, (value) => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value) => method.O.fromBinary(value, this._binaryOptions), input, metadata, options, callback);
    }
    /**
     * Represent the RPC to get the vector metadata. This RPC is mainly used for index correction process
     *
     * @generated from protobuf rpc: GetTimestamp(payload.v1.Object.GetTimestampRequest) returns (payload.v1.Object.Timestamp);
     */
    getTimestamp(input, metadata, options, callback) {
        const method = agent_pb_1.Agent.methods[4];
        return this.makeUnaryRequest(`/${agent_pb_1.Agent.typeName}/${method.name}`, (value) => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value) => method.O.fromBinary(value, this._binaryOptions), input, metadata, options, callback);
    }
}
exports.AgentClient = AgentClient;
